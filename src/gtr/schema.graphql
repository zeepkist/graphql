"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Favorite`."""
  allFavorites(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Favorite`."""
    orderBy: [FavoritesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FavoriteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FavoriteFilter
  ): FavoritesConnection

  """Reads and enables pagination through a set of `Level`."""
  allLevels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Level`."""
    orderBy: [LevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LevelFilter
  ): LevelsConnection

  """Reads and enables pagination through a set of `LevelItem`."""
  allLevelItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LevelItem`."""
    orderBy: [LevelItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevelItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LevelItemFilter
  ): LevelItemsConnection

  """Reads and enables pagination through a set of `LevelMetadatum`."""
  allLevelMetadata(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LevelMetadatum`."""
    orderBy: [LevelMetadataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevelMetadatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LevelMetadatumFilter
  ): LevelMetadataConnection

  """Reads and enables pagination through a set of `LevelPoint`."""
  allLevelPoints(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LevelPoint`."""
    orderBy: [LevelPointsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevelPointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LevelPointFilter
  ): LevelPointsConnection

  """Reads and enables pagination through a set of `LevelRequest`."""
  allLevelRequests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LevelRequest`."""
    orderBy: [LevelRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevelRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LevelRequestFilter
  ): LevelRequestsConnection

  """Reads and enables pagination through a set of `PersonalBestDaily`."""
  allPersonalBestDailies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestDaily`."""
    orderBy: [PersonalBestDailiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestDailyFilter
  ): PersonalBestDailiesConnection

  """Reads and enables pagination through a set of `PersonalBestGlobal`."""
  allPersonalBestGlobals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestGlobal`."""
    orderBy: [PersonalBestGlobalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestGlobalFilter
  ): PersonalBestGlobalsConnection

  """Reads and enables pagination through a set of `PersonalBestMonthly`."""
  allPersonalBestMonthlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestMonthly`."""
    orderBy: [PersonalBestMonthliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestMonthlyFilter
  ): PersonalBestMonthliesConnection

  """Reads and enables pagination through a set of `PersonalBestQuarterly`."""
  allPersonalBestQuarterlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestQuarterly`."""
    orderBy: [PersonalBestQuarterliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestQuarterlyFilter
  ): PersonalBestQuarterliesConnection

  """Reads and enables pagination through a set of `PersonalBestWeekly`."""
  allPersonalBestWeeklies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestWeekly`."""
    orderBy: [PersonalBestWeekliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestWeeklyFilter
  ): PersonalBestWeekliesConnection

  """Reads and enables pagination through a set of `PersonalBestYearly`."""
  allPersonalBestYearlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestYearly`."""
    orderBy: [PersonalBestYearliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestYearlyFilter
  ): PersonalBestYearliesConnection

  """Reads and enables pagination through a set of `Record`."""
  allRecords(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Record`."""
    orderBy: [RecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RecordFilter
  ): RecordsConnection

  """Reads and enables pagination through a set of `RecordMedia`."""
  allRecordMedias(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RecordMedia`."""
    orderBy: [RecordMediasOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecordMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RecordMediaFilter
  ): RecordMediasConnection

  """Reads and enables pagination through a set of `SampledFavorite`."""
  allSampledFavorites(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledFavorite`."""
    orderBy: [SampledFavoritesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledFavoriteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledFavoriteFilter
  ): SampledFavoritesConnection

  """Reads and enables pagination through a set of `SampledLevel`."""
  allSampledLevels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledLevel`."""
    orderBy: [SampledLevelsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledLevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledLevelFilter
  ): SampledLevelsConnection

  """Reads and enables pagination through a set of `SampledLevelItem`."""
  allSampledLevelItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledLevelItem`."""
    orderBy: [SampledLevelItemsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledLevelItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledLevelItemFilter
  ): SampledLevelItemsConnection

  """Reads and enables pagination through a set of `SampledLevelMetadatum`."""
  allSampledLevelMetadata(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledLevelMetadatum`."""
    orderBy: [SampledLevelMetadataOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledLevelMetadatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledLevelMetadatumFilter
  ): SampledLevelMetadataConnection

  """Reads and enables pagination through a set of `SampledLevelPoint`."""
  allSampledLevelPoints(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledLevelPoint`."""
    orderBy: [SampledLevelPointsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledLevelPointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledLevelPointFilter
  ): SampledLevelPointsConnection

  """Reads and enables pagination through a set of `SampledLevelRequest`."""
  allSampledLevelRequests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledLevelRequest`."""
    orderBy: [SampledLevelRequestsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledLevelRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledLevelRequestFilter
  ): SampledLevelRequestsConnection

  """
  Reads and enables pagination through a set of `SampledPersonalBestDaily`.
  """
  allSampledPersonalBestDailies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledPersonalBestDaily`."""
    orderBy: [SampledPersonalBestDailiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledPersonalBestDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledPersonalBestDailyFilter
  ): SampledPersonalBestDailiesConnection

  """
  Reads and enables pagination through a set of `SampledPersonalBestGlobal`.
  """
  allSampledPersonalBestGlobals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledPersonalBestGlobal`."""
    orderBy: [SampledPersonalBestGlobalsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledPersonalBestGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledPersonalBestGlobalFilter
  ): SampledPersonalBestGlobalsConnection

  """
  Reads and enables pagination through a set of `SampledPersonalBestMonthly`.
  """
  allSampledPersonalBestMonthlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledPersonalBestMonthly`."""
    orderBy: [SampledPersonalBestMonthliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledPersonalBestMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledPersonalBestMonthlyFilter
  ): SampledPersonalBestMonthliesConnection

  """
  Reads and enables pagination through a set of `SampledPersonalBestQuarterly`.
  """
  allSampledPersonalBestQuarterlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledPersonalBestQuarterly`."""
    orderBy: [SampledPersonalBestQuarterliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledPersonalBestQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledPersonalBestQuarterlyFilter
  ): SampledPersonalBestQuarterliesConnection

  """
  Reads and enables pagination through a set of `SampledPersonalBestWeekly`.
  """
  allSampledPersonalBestWeeklies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledPersonalBestWeekly`."""
    orderBy: [SampledPersonalBestWeekliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledPersonalBestWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledPersonalBestWeeklyFilter
  ): SampledPersonalBestWeekliesConnection

  """
  Reads and enables pagination through a set of `SampledPersonalBestYearly`.
  """
  allSampledPersonalBestYearlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledPersonalBestYearly`."""
    orderBy: [SampledPersonalBestYearliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledPersonalBestYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledPersonalBestYearlyFilter
  ): SampledPersonalBestYearliesConnection

  """Reads and enables pagination through a set of `SampledRecord`."""
  allSampledRecords(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledRecord`."""
    orderBy: [SampledRecordsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledRecordFilter
  ): SampledRecordsConnection

  """Reads and enables pagination through a set of `SampledRecordMedia`."""
  allSampledRecordMedias(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledRecordMedia`."""
    orderBy: [SampledRecordMediasOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledRecordMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledRecordMediaFilter
  ): SampledRecordMediasConnection

  """Reads and enables pagination through a set of `SampledStatsDaily`."""
  allSampledStatsDailies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledStatsDaily`."""
    orderBy: [SampledStatsDailiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledStatsDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledStatsDailyFilter
  ): SampledStatsDailiesConnection

  """Reads and enables pagination through a set of `SampledStatsGlobal`."""
  allSampledStatsGlobals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledStatsGlobal`."""
    orderBy: [SampledStatsGlobalsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledStatsGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledStatsGlobalFilter
  ): SampledStatsGlobalsConnection

  """Reads and enables pagination through a set of `SampledStatsMonthly`."""
  allSampledStatsMonthlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledStatsMonthly`."""
    orderBy: [SampledStatsMonthliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledStatsMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledStatsMonthlyFilter
  ): SampledStatsMonthliesConnection

  """Reads and enables pagination through a set of `SampledStatsQuarterly`."""
  allSampledStatsQuarterlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledStatsQuarterly`."""
    orderBy: [SampledStatsQuarterliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledStatsQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledStatsQuarterlyFilter
  ): SampledStatsQuarterliesConnection

  """Reads and enables pagination through a set of `SampledStatsWeekly`."""
  allSampledStatsWeeklies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledStatsWeekly`."""
    orderBy: [SampledStatsWeekliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledStatsWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledStatsWeeklyFilter
  ): SampledStatsWeekliesConnection

  """Reads and enables pagination through a set of `SampledStatsYearly`."""
  allSampledStatsYearlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledStatsYearly`."""
    orderBy: [SampledStatsYearliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledStatsYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledStatsYearlyFilter
  ): SampledStatsYearliesConnection

  """Reads and enables pagination through a set of `SampledUpvote`."""
  allSampledUpvotes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledUpvote`."""
    orderBy: [SampledUpvotesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledUpvoteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledUpvoteFilter
  ): SampledUpvotesConnection

  """Reads and enables pagination through a set of `SampledUser`."""
  allSampledUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledUser`."""
    orderBy: [SampledUsersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledUserFilter
  ): SampledUsersConnection

  """Reads and enables pagination through a set of `SampledUserPoint`."""
  allSampledUserPoints(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledUserPoint`."""
    orderBy: [SampledUserPointsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledUserPointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledUserPointFilter
  ): SampledUserPointsConnection

  """Reads and enables pagination through a set of `SampledVersion`."""
  allSampledVersions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledVersion`."""
    orderBy: [SampledVersionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledVersionFilter
  ): SampledVersionsConnection

  """
  Reads and enables pagination through a set of `SampledWorldRecordDaily`.
  """
  allSampledWorldRecordDailies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledWorldRecordDaily`."""
    orderBy: [SampledWorldRecordDailiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledWorldRecordDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledWorldRecordDailyFilter
  ): SampledWorldRecordDailiesConnection

  """
  Reads and enables pagination through a set of `SampledWorldRecordGlobal`.
  """
  allSampledWorldRecordGlobals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledWorldRecordGlobal`."""
    orderBy: [SampledWorldRecordGlobalsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledWorldRecordGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledWorldRecordGlobalFilter
  ): SampledWorldRecordGlobalsConnection

  """
  Reads and enables pagination through a set of `SampledWorldRecordMonthly`.
  """
  allSampledWorldRecordMonthlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledWorldRecordMonthly`."""
    orderBy: [SampledWorldRecordMonthliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledWorldRecordMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledWorldRecordMonthlyFilter
  ): SampledWorldRecordMonthliesConnection

  """
  Reads and enables pagination through a set of `SampledWorldRecordQuarterly`.
  """
  allSampledWorldRecordQuarterlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledWorldRecordQuarterly`."""
    orderBy: [SampledWorldRecordQuarterliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledWorldRecordQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledWorldRecordQuarterlyFilter
  ): SampledWorldRecordQuarterliesConnection

  """
  Reads and enables pagination through a set of `SampledWorldRecordWeekly`.
  """
  allSampledWorldRecordWeeklies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledWorldRecordWeekly`."""
    orderBy: [SampledWorldRecordWeekliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledWorldRecordWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledWorldRecordWeeklyFilter
  ): SampledWorldRecordWeekliesConnection

  """
  Reads and enables pagination through a set of `SampledWorldRecordYearly`.
  """
  allSampledWorldRecordYearlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SampledWorldRecordYearly`."""
    orderBy: [SampledWorldRecordYearliesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SampledWorldRecordYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SampledWorldRecordYearlyFilter
  ): SampledWorldRecordYearliesConnection

  """Reads and enables pagination through a set of `StatsDaily`."""
  allStatsDailies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsDaily`."""
    orderBy: [StatsDailiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsDailyFilter
  ): StatsDailiesConnection

  """Reads and enables pagination through a set of `StatsGlobal`."""
  allStatsGlobals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsGlobal`."""
    orderBy: [StatsGlobalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsGlobalFilter
  ): StatsGlobalsConnection

  """Reads and enables pagination through a set of `StatsMonthly`."""
  allStatsMonthlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsMonthly`."""
    orderBy: [StatsMonthliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsMonthlyFilter
  ): StatsMonthliesConnection

  """Reads and enables pagination through a set of `StatsQuarterly`."""
  allStatsQuarterlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsQuarterly`."""
    orderBy: [StatsQuarterliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsQuarterlyFilter
  ): StatsQuarterliesConnection

  """Reads and enables pagination through a set of `StatsWeekly`."""
  allStatsWeeklies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsWeekly`."""
    orderBy: [StatsWeekliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsWeeklyFilter
  ): StatsWeekliesConnection

  """Reads and enables pagination through a set of `StatsYearly`."""
  allStatsYearlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsYearly`."""
    orderBy: [StatsYearliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsYearlyFilter
  ): StatsYearliesConnection

  """Reads and enables pagination through a set of `Upvote`."""
  allUpvotes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Upvote`."""
    orderBy: [UpvotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpvoteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UpvoteFilter
  ): UpvotesConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `UserPoint`."""
  allUserPoints(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserPoint`."""
    orderBy: [UserPointsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserPointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserPointFilter
  ): UserPointsConnection

  """Reads and enables pagination through a set of `Version`."""
  allVersions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Version`."""
    orderBy: [VersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VersionFilter
  ): VersionsConnection

  """Reads and enables pagination through a set of `WorldRecordDaily`."""
  allWorldRecordDailies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordDaily`."""
    orderBy: [WorldRecordDailiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordDailyFilter
  ): WorldRecordDailiesConnection

  """Reads and enables pagination through a set of `WorldRecordGlobal`."""
  allWorldRecordGlobals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordGlobal`."""
    orderBy: [WorldRecordGlobalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordGlobalFilter
  ): WorldRecordGlobalsConnection

  """Reads and enables pagination through a set of `WorldRecordMonthly`."""
  allWorldRecordMonthlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordMonthly`."""
    orderBy: [WorldRecordMonthliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordMonthlyFilter
  ): WorldRecordMonthliesConnection

  """Reads and enables pagination through a set of `WorldRecordQuarterly`."""
  allWorldRecordQuarterlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordQuarterly`."""
    orderBy: [WorldRecordQuarterliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordQuarterlyFilter
  ): WorldRecordQuarterliesConnection

  """Reads and enables pagination through a set of `WorldRecordWeekly`."""
  allWorldRecordWeeklies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordWeekly`."""
    orderBy: [WorldRecordWeekliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordWeeklyFilter
  ): WorldRecordWeekliesConnection

  """Reads and enables pagination through a set of `WorldRecordYearly`."""
  allWorldRecordYearlies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordYearly`."""
    orderBy: [WorldRecordYearliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordYearlyFilter
  ): WorldRecordYearliesConnection
  favoriteById(id: Int!): Favorite
  levelById(id: Int!): Level
  levelByHash(hash: String!): Level
  levelItemById(id: Int!): LevelItem
  levelMetadatumById(id: Int!): LevelMetadatum
  levelPointById(id: Int!): LevelPoint
  levelRequestById(id: Int!): LevelRequest
  personalBestDailyById(id: Int!): PersonalBestDaily
  personalBestGlobalById(id: Int!): PersonalBestGlobal
  personalBestMonthlyById(id: Int!): PersonalBestMonthly
  personalBestQuarterlyById(id: Int!): PersonalBestQuarterly
  personalBestWeeklyById(id: Int!): PersonalBestWeekly
  personalBestYearlyById(id: Int!): PersonalBestYearly
  recordById(id: Int!): Record
  recordMediaById(id: Int!): RecordMedia
  statsDailyById(id: Int!): StatsDaily
  statsGlobalById(id: Int!): StatsGlobal
  statsMonthlyById(id: Int!): StatsMonthly
  statsQuarterlyById(id: Int!): StatsQuarterly
  statsWeeklyById(id: Int!): StatsWeekly
  statsYearlyById(id: Int!): StatsYearly
  upvoteById(id: Int!): Upvote
  userById(id: Int!): User
  userPointById(id: Int!): UserPoint
  versionById(id: Int!): Version
  worldRecordDailyById(id: Int!): WorldRecordDaily
  worldRecordGlobalById(id: Int!): WorldRecordGlobal
  worldRecordMonthlyById(id: Int!): WorldRecordMonthly
  worldRecordQuarterlyById(id: Int!): WorldRecordQuarterly
  worldRecordWeeklyById(id: Int!): WorldRecordWeekly
  worldRecordYearlyById(id: Int!): WorldRecordYearly

  """
  Retrieves filtered level items based on specified criteria, excluding levels based on hashes.
  """
  zRtm(
    pMinAuthorTime: Float
    pMaxAuthorTime: Float
    pMinRecords: Int
    pMaxRecords: Int
    pExcludedAuthorIds: [Int]
    pExcludedHashes: [String]
    pMinCheckpoints: Int
    pMaxCheckpoints: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ZRtmRecordFilter
  ): ZRtmConnection

  """Reads a single `Favorite` using its globally unique `ID`."""
  favorite(
    """The globally unique `ID` to be used in selecting a single `Favorite`."""
    nodeId: ID!
  ): Favorite

  """Reads a single `Level` using its globally unique `ID`."""
  level(
    """The globally unique `ID` to be used in selecting a single `Level`."""
    nodeId: ID!
  ): Level

  """Reads a single `LevelItem` using its globally unique `ID`."""
  levelItem(
    """The globally unique `ID` to be used in selecting a single `LevelItem`."""
    nodeId: ID!
  ): LevelItem

  """Reads a single `LevelMetadatum` using its globally unique `ID`."""
  levelMetadatum(
    """
    The globally unique `ID` to be used in selecting a single `LevelMetadatum`.
    """
    nodeId: ID!
  ): LevelMetadatum

  """Reads a single `LevelPoint` using its globally unique `ID`."""
  levelPoint(
    """
    The globally unique `ID` to be used in selecting a single `LevelPoint`.
    """
    nodeId: ID!
  ): LevelPoint

  """Reads a single `LevelRequest` using its globally unique `ID`."""
  levelRequest(
    """
    The globally unique `ID` to be used in selecting a single `LevelRequest`.
    """
    nodeId: ID!
  ): LevelRequest

  """Reads a single `PersonalBestDaily` using its globally unique `ID`."""
  personalBestDaily(
    """
    The globally unique `ID` to be used in selecting a single `PersonalBestDaily`.
    """
    nodeId: ID!
  ): PersonalBestDaily

  """Reads a single `PersonalBestGlobal` using its globally unique `ID`."""
  personalBestGlobal(
    """
    The globally unique `ID` to be used in selecting a single `PersonalBestGlobal`.
    """
    nodeId: ID!
  ): PersonalBestGlobal

  """Reads a single `PersonalBestMonthly` using its globally unique `ID`."""
  personalBestMonthly(
    """
    The globally unique `ID` to be used in selecting a single `PersonalBestMonthly`.
    """
    nodeId: ID!
  ): PersonalBestMonthly

  """Reads a single `PersonalBestQuarterly` using its globally unique `ID`."""
  personalBestQuarterly(
    """
    The globally unique `ID` to be used in selecting a single `PersonalBestQuarterly`.
    """
    nodeId: ID!
  ): PersonalBestQuarterly

  """Reads a single `PersonalBestWeekly` using its globally unique `ID`."""
  personalBestWeekly(
    """
    The globally unique `ID` to be used in selecting a single `PersonalBestWeekly`.
    """
    nodeId: ID!
  ): PersonalBestWeekly

  """Reads a single `PersonalBestYearly` using its globally unique `ID`."""
  personalBestYearly(
    """
    The globally unique `ID` to be used in selecting a single `PersonalBestYearly`.
    """
    nodeId: ID!
  ): PersonalBestYearly

  """Reads a single `Record` using its globally unique `ID`."""
  record(
    """The globally unique `ID` to be used in selecting a single `Record`."""
    nodeId: ID!
  ): Record

  """Reads a single `RecordMedia` using its globally unique `ID`."""
  recordMedia(
    """
    The globally unique `ID` to be used in selecting a single `RecordMedia`.
    """
    nodeId: ID!
  ): RecordMedia

  """Reads a single `StatsDaily` using its globally unique `ID`."""
  statsDaily(
    """
    The globally unique `ID` to be used in selecting a single `StatsDaily`.
    """
    nodeId: ID!
  ): StatsDaily

  """Reads a single `StatsGlobal` using its globally unique `ID`."""
  statsGlobal(
    """
    The globally unique `ID` to be used in selecting a single `StatsGlobal`.
    """
    nodeId: ID!
  ): StatsGlobal

  """Reads a single `StatsMonthly` using its globally unique `ID`."""
  statsMonthly(
    """
    The globally unique `ID` to be used in selecting a single `StatsMonthly`.
    """
    nodeId: ID!
  ): StatsMonthly

  """Reads a single `StatsQuarterly` using its globally unique `ID`."""
  statsQuarterly(
    """
    The globally unique `ID` to be used in selecting a single `StatsQuarterly`.
    """
    nodeId: ID!
  ): StatsQuarterly

  """Reads a single `StatsWeekly` using its globally unique `ID`."""
  statsWeekly(
    """
    The globally unique `ID` to be used in selecting a single `StatsWeekly`.
    """
    nodeId: ID!
  ): StatsWeekly

  """Reads a single `StatsYearly` using its globally unique `ID`."""
  statsYearly(
    """
    The globally unique `ID` to be used in selecting a single `StatsYearly`.
    """
    nodeId: ID!
  ): StatsYearly

  """Reads a single `Upvote` using its globally unique `ID`."""
  upvote(
    """The globally unique `ID` to be used in selecting a single `Upvote`."""
    nodeId: ID!
  ): Upvote

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `UserPoint` using its globally unique `ID`."""
  userPoint(
    """The globally unique `ID` to be used in selecting a single `UserPoint`."""
    nodeId: ID!
  ): UserPoint

  """Reads a single `Version` using its globally unique `ID`."""
  version(
    """The globally unique `ID` to be used in selecting a single `Version`."""
    nodeId: ID!
  ): Version

  """Reads a single `WorldRecordDaily` using its globally unique `ID`."""
  worldRecordDaily(
    """
    The globally unique `ID` to be used in selecting a single `WorldRecordDaily`.
    """
    nodeId: ID!
  ): WorldRecordDaily

  """Reads a single `WorldRecordGlobal` using its globally unique `ID`."""
  worldRecordGlobal(
    """
    The globally unique `ID` to be used in selecting a single `WorldRecordGlobal`.
    """
    nodeId: ID!
  ): WorldRecordGlobal

  """Reads a single `WorldRecordMonthly` using its globally unique `ID`."""
  worldRecordMonthly(
    """
    The globally unique `ID` to be used in selecting a single `WorldRecordMonthly`.
    """
    nodeId: ID!
  ): WorldRecordMonthly

  """Reads a single `WorldRecordQuarterly` using its globally unique `ID`."""
  worldRecordQuarterly(
    """
    The globally unique `ID` to be used in selecting a single `WorldRecordQuarterly`.
    """
    nodeId: ID!
  ): WorldRecordQuarterly

  """Reads a single `WorldRecordWeekly` using its globally unique `ID`."""
  worldRecordWeekly(
    """
    The globally unique `ID` to be used in selecting a single `WorldRecordWeekly`.
    """
    nodeId: ID!
  ): WorldRecordWeekly

  """Reads a single `WorldRecordYearly` using its globally unique `ID`."""
  worldRecordYearly(
    """
    The globally unique `ID` to be used in selecting a single `WorldRecordYearly`.
    """
    nodeId: ID!
  ): WorldRecordYearly
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Favorite` values."""
type FavoritesConnection {
  """A list of `Favorite` objects."""
  nodes: [Favorite]!

  """
  A list of edges which contains the `Favorite` and cursor to aid in pagination.
  """
  edges: [FavoritesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Favorite` you could get from the connection."""
  totalCount: Int!
}

type Favorite implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idUser: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  idLevel: Int!

  """Reads a single `User` that is related to this `Favorite`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `Favorite`."""
  levelByIdLevel: Level
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  steamName: String
  banned: Boolean!
  dateCreated: Datetime!
  dateUpdated: Datetime
  steamId: BigFloat
  discordId: BigFloat

  """Reads and enables pagination through a set of `Favorite`."""
  favoritesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Favorite`."""
    orderBy: [FavoritesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FavoriteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FavoriteFilter
  ): FavoritesConnection!

  """Reads and enables pagination through a set of `PersonalBestGlobal`."""
  personalBestGlobalsByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestGlobal`."""
    orderBy: [PersonalBestGlobalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestGlobalFilter
  ): PersonalBestGlobalsConnection!

  """Reads and enables pagination through a set of `UserPoint`."""
  userPointsByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserPoint`."""
    orderBy: [UserPointsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserPointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserPointFilter
  ): UserPointsConnection!

  """Reads and enables pagination through a set of `Record`."""
  recordsByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Record`."""
    orderBy: [RecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RecordFilter
  ): RecordsConnection!

  """Reads and enables pagination through a set of `StatsGlobal`."""
  statsGlobalsByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsGlobal`."""
    orderBy: [StatsGlobalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsGlobalFilter
  ): StatsGlobalsConnection!

  """Reads and enables pagination through a set of `Upvote`."""
  upvotesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Upvote`."""
    orderBy: [UpvotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpvoteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UpvoteFilter
  ): UpvotesConnection!

  """Reads and enables pagination through a set of `PersonalBestYearly`."""
  personalBestYearliesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestYearly`."""
    orderBy: [PersonalBestYearliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestYearlyFilter
  ): PersonalBestYearliesConnection!

  """Reads and enables pagination through a set of `PersonalBestMonthly`."""
  personalBestMonthliesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestMonthly`."""
    orderBy: [PersonalBestMonthliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestMonthlyFilter
  ): PersonalBestMonthliesConnection!

  """Reads and enables pagination through a set of `PersonalBestWeekly`."""
  personalBestWeekliesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestWeekly`."""
    orderBy: [PersonalBestWeekliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestWeeklyFilter
  ): PersonalBestWeekliesConnection!

  """Reads and enables pagination through a set of `PersonalBestDaily`."""
  personalBestDailiesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestDaily`."""
    orderBy: [PersonalBestDailiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestDailyFilter
  ): PersonalBestDailiesConnection!

  """Reads and enables pagination through a set of `StatsMonthly`."""
  statsMonthliesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsMonthly`."""
    orderBy: [StatsMonthliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsMonthlyFilter
  ): StatsMonthliesConnection!

  """Reads and enables pagination through a set of `StatsYearly`."""
  statsYearliesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsYearly`."""
    orderBy: [StatsYearliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsYearlyFilter
  ): StatsYearliesConnection!

  """Reads and enables pagination through a set of `StatsWeekly`."""
  statsWeekliesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsWeekly`."""
    orderBy: [StatsWeekliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsWeeklyFilter
  ): StatsWeekliesConnection!

  """Reads and enables pagination through a set of `StatsDaily`."""
  statsDailiesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsDaily`."""
    orderBy: [StatsDailiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsDailyFilter
  ): StatsDailiesConnection!

  """Reads and enables pagination through a set of `PersonalBestQuarterly`."""
  personalBestQuarterliesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestQuarterly`."""
    orderBy: [PersonalBestQuarterliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestQuarterlyFilter
  ): PersonalBestQuarterliesConnection!

  """Reads and enables pagination through a set of `StatsQuarterly`."""
  statsQuarterliesByIdUser(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsQuarterly`."""
    orderBy: [StatsQuarterliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsQuarterlyFilter
  ): StatsQuarterliesConnection!
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `Favorite`."""
enum FavoritesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Favorite` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FavoriteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int
}

"""
A filter to be used against `Favorite` object types. All fields are combined with a logical ‘and.’
"""
input FavoriteFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [FavoriteFilter!]

  """Checks for any expressions in this list."""
  or: [FavoriteFilter!]

  """Negates the expression."""
  not: FavoriteFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `steamName` field."""
  steamName: StringFilter

  """Filter by the object’s `banned` field."""
  banned: BooleanFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `steamId` field."""
  steamId: BigFloatFilter

  """Filter by the object’s `discordId` field."""
  discordId: BigFloatFilter

  """Filter by the object’s `favoritesByIdUser` relation."""
  favoritesByIdUser: UserToManyFavoriteFilter

  """Some related `favoritesByIdUser` exist."""
  favoritesByIdUserExist: Boolean

  """Filter by the object’s `personalBestGlobalsByIdUser` relation."""
  personalBestGlobalsByIdUser: UserToManyPersonalBestGlobalFilter

  """Some related `personalBestGlobalsByIdUser` exist."""
  personalBestGlobalsByIdUserExist: Boolean

  """Filter by the object’s `userPointsByIdUser` relation."""
  userPointsByIdUser: UserToManyUserPointFilter

  """Some related `userPointsByIdUser` exist."""
  userPointsByIdUserExist: Boolean

  """Filter by the object’s `recordsByIdUser` relation."""
  recordsByIdUser: UserToManyRecordFilter

  """Some related `recordsByIdUser` exist."""
  recordsByIdUserExist: Boolean

  """Filter by the object’s `statsGlobalsByIdUser` relation."""
  statsGlobalsByIdUser: UserToManyStatsGlobalFilter

  """Some related `statsGlobalsByIdUser` exist."""
  statsGlobalsByIdUserExist: Boolean

  """Filter by the object’s `upvotesByIdUser` relation."""
  upvotesByIdUser: UserToManyUpvoteFilter

  """Some related `upvotesByIdUser` exist."""
  upvotesByIdUserExist: Boolean

  """Filter by the object’s `personalBestYearliesByIdUser` relation."""
  personalBestYearliesByIdUser: UserToManyPersonalBestYearlyFilter

  """Some related `personalBestYearliesByIdUser` exist."""
  personalBestYearliesByIdUserExist: Boolean

  """Filter by the object’s `personalBestMonthliesByIdUser` relation."""
  personalBestMonthliesByIdUser: UserToManyPersonalBestMonthlyFilter

  """Some related `personalBestMonthliesByIdUser` exist."""
  personalBestMonthliesByIdUserExist: Boolean

  """Filter by the object’s `personalBestWeekliesByIdUser` relation."""
  personalBestWeekliesByIdUser: UserToManyPersonalBestWeeklyFilter

  """Some related `personalBestWeekliesByIdUser` exist."""
  personalBestWeekliesByIdUserExist: Boolean

  """Filter by the object’s `personalBestDailiesByIdUser` relation."""
  personalBestDailiesByIdUser: UserToManyPersonalBestDailyFilter

  """Some related `personalBestDailiesByIdUser` exist."""
  personalBestDailiesByIdUserExist: Boolean

  """Filter by the object’s `statsMonthliesByIdUser` relation."""
  statsMonthliesByIdUser: UserToManyStatsMonthlyFilter

  """Some related `statsMonthliesByIdUser` exist."""
  statsMonthliesByIdUserExist: Boolean

  """Filter by the object’s `statsYearliesByIdUser` relation."""
  statsYearliesByIdUser: UserToManyStatsYearlyFilter

  """Some related `statsYearliesByIdUser` exist."""
  statsYearliesByIdUserExist: Boolean

  """Filter by the object’s `statsWeekliesByIdUser` relation."""
  statsWeekliesByIdUser: UserToManyStatsWeeklyFilter

  """Some related `statsWeekliesByIdUser` exist."""
  statsWeekliesByIdUserExist: Boolean

  """Filter by the object’s `statsDailiesByIdUser` relation."""
  statsDailiesByIdUser: UserToManyStatsDailyFilter

  """Some related `statsDailiesByIdUser` exist."""
  statsDailiesByIdUserExist: Boolean

  """Filter by the object’s `personalBestQuarterliesByIdUser` relation."""
  personalBestQuarterliesByIdUser: UserToManyPersonalBestQuarterlyFilter

  """Some related `personalBestQuarterliesByIdUser` exist."""
  personalBestQuarterliesByIdUserExist: Boolean

  """Filter by the object’s `statsQuarterliesByIdUser` relation."""
  statsQuarterliesByIdUser: UserToManyStatsQuarterlyFilter

  """Some related `statsQuarterliesByIdUser` exist."""
  statsQuarterliesByIdUserExist: Boolean

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """Not included in the specified list."""
  notIn: [BigFloat!]

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat
}

"""
A filter to be used against many `Favorite` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyFavoriteFilter {
  """
  Every related `Favorite` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FavoriteFilter

  """
  Some related `Favorite` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FavoriteFilter

  """
  No related `Favorite` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FavoriteFilter
}

"""
A filter to be used against many `PersonalBestGlobal` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPersonalBestGlobalFilter {
  """
  Every related `PersonalBestGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestGlobalFilter

  """
  Some related `PersonalBestGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestGlobalFilter

  """
  No related `PersonalBestGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestGlobalFilter
}

"""
A filter to be used against `PersonalBestGlobal` object types. All fields are combined with a logical ‘and.’
"""
input PersonalBestGlobalFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [PersonalBestGlobalFilter!]

  """Checks for any expressions in this list."""
  or: [PersonalBestGlobalFilter!]

  """Negates the expression."""
  not: PersonalBestGlobalFilter
}

"""
A filter to be used against `Record` object types. All fields are combined with a logical ‘and.’
"""
input RecordFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `time` field."""
  time: FloatFilter

  """Filter by the object’s `gameVersion` field."""
  gameVersion: StringFilter

  """Filter by the object’s `isValid` field."""
  isValid: BooleanFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `modVersion` field."""
  modVersion: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `splits` field."""
  splits: FloatListFilter

  """Filter by the object’s `speeds` field."""
  speeds: FloatListFilter

  """Filter by the object’s `recordMediasByIdRecord` relation."""
  recordMediasByIdRecord: RecordToManyRecordMediaFilter

  """Some related `recordMediasByIdRecord` exist."""
  recordMediasByIdRecordExist: Boolean

  """Filter by the object’s `personalBestGlobalsByIdRecord` relation."""
  personalBestGlobalsByIdRecord: RecordToManyPersonalBestGlobalFilter

  """Some related `personalBestGlobalsByIdRecord` exist."""
  personalBestGlobalsByIdRecordExist: Boolean

  """Filter by the object’s `worldRecordGlobalsByIdRecord` relation."""
  worldRecordGlobalsByIdRecord: RecordToManyWorldRecordGlobalFilter

  """Some related `worldRecordGlobalsByIdRecord` exist."""
  worldRecordGlobalsByIdRecordExist: Boolean

  """Filter by the object’s `personalBestYearliesByIdRecord` relation."""
  personalBestYearliesByIdRecord: RecordToManyPersonalBestYearlyFilter

  """Some related `personalBestYearliesByIdRecord` exist."""
  personalBestYearliesByIdRecordExist: Boolean

  """Filter by the object’s `personalBestMonthliesByIdRecord` relation."""
  personalBestMonthliesByIdRecord: RecordToManyPersonalBestMonthlyFilter

  """Some related `personalBestMonthliesByIdRecord` exist."""
  personalBestMonthliesByIdRecordExist: Boolean

  """Filter by the object’s `personalBestWeekliesByIdRecord` relation."""
  personalBestWeekliesByIdRecord: RecordToManyPersonalBestWeeklyFilter

  """Some related `personalBestWeekliesByIdRecord` exist."""
  personalBestWeekliesByIdRecordExist: Boolean

  """Filter by the object’s `personalBestDailiesByIdRecord` relation."""
  personalBestDailiesByIdRecord: RecordToManyPersonalBestDailyFilter

  """Some related `personalBestDailiesByIdRecord` exist."""
  personalBestDailiesByIdRecordExist: Boolean

  """Filter by the object’s `worldRecordMonthliesByIdRecord` relation."""
  worldRecordMonthliesByIdRecord: RecordToManyWorldRecordMonthlyFilter

  """Some related `worldRecordMonthliesByIdRecord` exist."""
  worldRecordMonthliesByIdRecordExist: Boolean

  """Filter by the object’s `worldRecordYearliesByIdRecord` relation."""
  worldRecordYearliesByIdRecord: RecordToManyWorldRecordYearlyFilter

  """Some related `worldRecordYearliesByIdRecord` exist."""
  worldRecordYearliesByIdRecordExist: Boolean

  """Filter by the object’s `worldRecordWeekliesByIdRecord` relation."""
  worldRecordWeekliesByIdRecord: RecordToManyWorldRecordWeeklyFilter

  """Some related `worldRecordWeekliesByIdRecord` exist."""
  worldRecordWeekliesByIdRecordExist: Boolean

  """Filter by the object’s `worldRecordDailiesByIdRecord` relation."""
  worldRecordDailiesByIdRecord: RecordToManyWorldRecordDailyFilter

  """Some related `worldRecordDailiesByIdRecord` exist."""
  worldRecordDailiesByIdRecordExist: Boolean

  """Filter by the object’s `personalBestQuarterliesByIdRecord` relation."""
  personalBestQuarterliesByIdRecord: RecordToManyPersonalBestQuarterlyFilter

  """Some related `personalBestQuarterliesByIdRecord` exist."""
  personalBestQuarterliesByIdRecordExist: Boolean

  """Filter by the object’s `worldRecordQuarterliesByIdRecord` relation."""
  worldRecordQuarterliesByIdRecord: RecordToManyWorldRecordQuarterlyFilter

  """Some related `worldRecordQuarterliesByIdRecord` exist."""
  worldRecordQuarterliesByIdRecordExist: Boolean

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [RecordFilter!]

  """Checks for any expressions in this list."""
  or: [RecordFilter!]

  """Negates the expression."""
  not: RecordFilter
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

"""
A filter to be used against Float List fields. All fields are combined with a logical ‘and.’
"""
input FloatListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [Float]

  """Not equal to the specified value."""
  notEqualTo: [Float]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [Float]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [Float]

  """Less than the specified value."""
  lessThan: [Float]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [Float]

  """Greater than the specified value."""
  greaterThan: [Float]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [Float]

  """Contains the specified list of values."""
  contains: [Float]

  """Contained by the specified list of values."""
  containedBy: [Float]

  """Overlaps the specified list of values."""
  overlaps: [Float]

  """Any array item is equal to the specified value."""
  anyEqualTo: Float

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: Float

  """Any array item is less than the specified value."""
  anyLessThan: Float

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: Float

  """Any array item is greater than the specified value."""
  anyGreaterThan: Float

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: Float
}

"""
A filter to be used against many `RecordMedia` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyRecordMediaFilter {
  """
  Every related `RecordMedia` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RecordMediaFilter

  """
  Some related `RecordMedia` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RecordMediaFilter

  """
  No related `RecordMedia` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RecordMediaFilter
}

"""
A filter to be used against `RecordMedia` object types. All fields are combined with a logical ‘and.’
"""
input RecordMediaFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `ghostUrl` field."""
  ghostUrl: StringFilter

  """Filter by the object’s `screenshotUrl` field."""
  screenshotUrl: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Checks for all expressions in this list."""
  and: [RecordMediaFilter!]

  """Checks for any expressions in this list."""
  or: [RecordMediaFilter!]

  """Negates the expression."""
  not: RecordMediaFilter
}

"""
A filter to be used against many `PersonalBestGlobal` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyPersonalBestGlobalFilter {
  """
  Every related `PersonalBestGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestGlobalFilter

  """
  Some related `PersonalBestGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestGlobalFilter

  """
  No related `PersonalBestGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestGlobalFilter
}

"""
A filter to be used against many `WorldRecordGlobal` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyWorldRecordGlobalFilter {
  """
  Every related `WorldRecordGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordGlobalFilter

  """
  Some related `WorldRecordGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordGlobalFilter

  """
  No related `WorldRecordGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordGlobalFilter
}

"""
A filter to be used against `WorldRecordGlobal` object types. All fields are combined with a logical ‘and.’
"""
input WorldRecordGlobalFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [WorldRecordGlobalFilter!]

  """Checks for any expressions in this list."""
  or: [WorldRecordGlobalFilter!]

  """Negates the expression."""
  not: WorldRecordGlobalFilter
}

"""
A filter to be used against `Level` object types. All fields are combined with a logical ‘and.’
"""
input LevelFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `hash` field."""
  hash: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `favoritesByIdLevel` relation."""
  favoritesByIdLevel: LevelToManyFavoriteFilter

  """Some related `favoritesByIdLevel` exist."""
  favoritesByIdLevelExist: Boolean

  """Filter by the object’s `levelPointsByIdLevel` relation."""
  levelPointsByIdLevel: LevelToManyLevelPointFilter

  """Some related `levelPointsByIdLevel` exist."""
  levelPointsByIdLevelExist: Boolean

  """Filter by the object’s `levelItemsByIdLevel` relation."""
  levelItemsByIdLevel: LevelToManyLevelItemFilter

  """Some related `levelItemsByIdLevel` exist."""
  levelItemsByIdLevelExist: Boolean

  """Filter by the object’s `levelMetadataByIdLevel` relation."""
  levelMetadataByIdLevel: LevelToManyLevelMetadatumFilter

  """Some related `levelMetadataByIdLevel` exist."""
  levelMetadataByIdLevelExist: Boolean

  """Filter by the object’s `personalBestGlobalsByIdLevel` relation."""
  personalBestGlobalsByIdLevel: LevelToManyPersonalBestGlobalFilter

  """Some related `personalBestGlobalsByIdLevel` exist."""
  personalBestGlobalsByIdLevelExist: Boolean

  """Filter by the object’s `recordsByIdLevel` relation."""
  recordsByIdLevel: LevelToManyRecordFilter

  """Some related `recordsByIdLevel` exist."""
  recordsByIdLevelExist: Boolean

  """Filter by the object’s `statsGlobalsByIdLevel` relation."""
  statsGlobalsByIdLevel: LevelToManyStatsGlobalFilter

  """Some related `statsGlobalsByIdLevel` exist."""
  statsGlobalsByIdLevelExist: Boolean

  """Filter by the object’s `upvotesByIdLevel` relation."""
  upvotesByIdLevel: LevelToManyUpvoteFilter

  """Some related `upvotesByIdLevel` exist."""
  upvotesByIdLevelExist: Boolean

  """Filter by the object’s `worldRecordGlobalsByIdLevel` relation."""
  worldRecordGlobalsByIdLevel: LevelToManyWorldRecordGlobalFilter

  """Some related `worldRecordGlobalsByIdLevel` exist."""
  worldRecordGlobalsByIdLevelExist: Boolean

  """Filter by the object’s `personalBestYearliesByIdLevel` relation."""
  personalBestYearliesByIdLevel: LevelToManyPersonalBestYearlyFilter

  """Some related `personalBestYearliesByIdLevel` exist."""
  personalBestYearliesByIdLevelExist: Boolean

  """Filter by the object’s `personalBestMonthliesByIdLevel` relation."""
  personalBestMonthliesByIdLevel: LevelToManyPersonalBestMonthlyFilter

  """Some related `personalBestMonthliesByIdLevel` exist."""
  personalBestMonthliesByIdLevelExist: Boolean

  """Filter by the object’s `personalBestWeekliesByIdLevel` relation."""
  personalBestWeekliesByIdLevel: LevelToManyPersonalBestWeeklyFilter

  """Some related `personalBestWeekliesByIdLevel` exist."""
  personalBestWeekliesByIdLevelExist: Boolean

  """Filter by the object’s `personalBestDailiesByIdLevel` relation."""
  personalBestDailiesByIdLevel: LevelToManyPersonalBestDailyFilter

  """Some related `personalBestDailiesByIdLevel` exist."""
  personalBestDailiesByIdLevelExist: Boolean

  """Filter by the object’s `worldRecordMonthliesByIdLevel` relation."""
  worldRecordMonthliesByIdLevel: LevelToManyWorldRecordMonthlyFilter

  """Some related `worldRecordMonthliesByIdLevel` exist."""
  worldRecordMonthliesByIdLevelExist: Boolean

  """Filter by the object’s `worldRecordYearliesByIdLevel` relation."""
  worldRecordYearliesByIdLevel: LevelToManyWorldRecordYearlyFilter

  """Some related `worldRecordYearliesByIdLevel` exist."""
  worldRecordYearliesByIdLevelExist: Boolean

  """Filter by the object’s `worldRecordWeekliesByIdLevel` relation."""
  worldRecordWeekliesByIdLevel: LevelToManyWorldRecordWeeklyFilter

  """Some related `worldRecordWeekliesByIdLevel` exist."""
  worldRecordWeekliesByIdLevelExist: Boolean

  """Filter by the object’s `worldRecordDailiesByIdLevel` relation."""
  worldRecordDailiesByIdLevel: LevelToManyWorldRecordDailyFilter

  """Some related `worldRecordDailiesByIdLevel` exist."""
  worldRecordDailiesByIdLevelExist: Boolean

  """Filter by the object’s `statsMonthliesByIdLevel` relation."""
  statsMonthliesByIdLevel: LevelToManyStatsMonthlyFilter

  """Some related `statsMonthliesByIdLevel` exist."""
  statsMonthliesByIdLevelExist: Boolean

  """Filter by the object’s `statsYearliesByIdLevel` relation."""
  statsYearliesByIdLevel: LevelToManyStatsYearlyFilter

  """Some related `statsYearliesByIdLevel` exist."""
  statsYearliesByIdLevelExist: Boolean

  """Filter by the object’s `statsWeekliesByIdLevel` relation."""
  statsWeekliesByIdLevel: LevelToManyStatsWeeklyFilter

  """Some related `statsWeekliesByIdLevel` exist."""
  statsWeekliesByIdLevelExist: Boolean

  """Filter by the object’s `statsDailiesByIdLevel` relation."""
  statsDailiesByIdLevel: LevelToManyStatsDailyFilter

  """Some related `statsDailiesByIdLevel` exist."""
  statsDailiesByIdLevelExist: Boolean

  """Filter by the object’s `personalBestQuarterliesByIdLevel` relation."""
  personalBestQuarterliesByIdLevel: LevelToManyPersonalBestQuarterlyFilter

  """Some related `personalBestQuarterliesByIdLevel` exist."""
  personalBestQuarterliesByIdLevelExist: Boolean

  """Filter by the object’s `statsQuarterliesByIdLevel` relation."""
  statsQuarterliesByIdLevel: LevelToManyStatsQuarterlyFilter

  """Some related `statsQuarterliesByIdLevel` exist."""
  statsQuarterliesByIdLevelExist: Boolean

  """Filter by the object’s `worldRecordQuarterliesByIdLevel` relation."""
  worldRecordQuarterliesByIdLevel: LevelToManyWorldRecordQuarterlyFilter

  """Some related `worldRecordQuarterliesByIdLevel` exist."""
  worldRecordQuarterliesByIdLevelExist: Boolean

  """Checks for all expressions in this list."""
  and: [LevelFilter!]

  """Checks for any expressions in this list."""
  or: [LevelFilter!]

  """Negates the expression."""
  not: LevelFilter
}

"""
A filter to be used against many `Favorite` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyFavoriteFilter {
  """
  Every related `Favorite` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FavoriteFilter

  """
  Some related `Favorite` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FavoriteFilter

  """
  No related `Favorite` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FavoriteFilter
}

"""
A filter to be used against many `LevelPoint` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyLevelPointFilter {
  """
  Every related `LevelPoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LevelPointFilter

  """
  Some related `LevelPoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LevelPointFilter

  """
  No related `LevelPoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LevelPointFilter
}

"""
A filter to be used against `LevelPoint` object types. All fields are combined with a logical ‘and.’
"""
input LevelPointFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `points` field."""
  points: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [LevelPointFilter!]

  """Checks for any expressions in this list."""
  or: [LevelPointFilter!]

  """Negates the expression."""
  not: LevelPointFilter
}

"""
A filter to be used against many `LevelItem` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyLevelItemFilter {
  """
  Every related `LevelItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LevelItemFilter

  """
  Some related `LevelItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LevelItemFilter

  """
  No related `LevelItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LevelItemFilter
}

"""
A filter to be used against `LevelItem` object types. All fields are combined with a logical ‘and.’
"""
input LevelItemFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `workshopId` field."""
  workshopId: BigFloatFilter

  """Filter by the object’s `authorId` field."""
  authorId: BigFloatFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `imageUrl` field."""
  imageUrl: StringFilter

  """Filter by the object’s `fileAuthor` field."""
  fileAuthor: StringFilter

  """Filter by the object’s `fileUid` field."""
  fileUid: StringFilter

  """Filter by the object’s `validationTimeAuthor` field."""
  validationTimeAuthor: FloatFilter

  """Filter by the object’s `validationTimeGold` field."""
  validationTimeGold: FloatFilter

  """Filter by the object’s `validationTimeSilver` field."""
  validationTimeSilver: FloatFilter

  """Filter by the object’s `validationTimeBronze` field."""
  validationTimeBronze: FloatFilter

  """Filter by the object’s `deleted` field."""
  deleted: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [LevelItemFilter!]

  """Checks for any expressions in this list."""
  or: [LevelItemFilter!]

  """Negates the expression."""
  not: LevelItemFilter
}

"""
A filter to be used against many `LevelMetadatum` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyLevelMetadatumFilter {
  """
  Every related `LevelMetadatum` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LevelMetadatumFilter

  """
  Some related `LevelMetadatum` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LevelMetadatumFilter

  """
  No related `LevelMetadatum` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LevelMetadatumFilter
}

"""
A filter to be used against `LevelMetadatum` object types. All fields are combined with a logical ‘and.’
"""
input LevelMetadatumFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `amountCheckpoints` field."""
  amountCheckpoints: IntFilter

  """Filter by the object’s `amountFinishes` field."""
  amountFinishes: IntFilter

  """Filter by the object’s `amountBlocks` field."""
  amountBlocks: IntFilter

  """Filter by the object’s `typeGround` field."""
  typeGround: IntFilter

  """Filter by the object’s `typeSkybox` field."""
  typeSkybox: IntFilter

  """Filter by the object’s `blocks` field."""
  blocks: JSONFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [LevelMetadatumFilter!]

  """Checks for any expressions in this list."""
  or: [LevelMetadatumFilter!]

  """Negates the expression."""
  not: LevelMetadatumFilter
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against many `PersonalBestGlobal` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyPersonalBestGlobalFilter {
  """
  Every related `PersonalBestGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestGlobalFilter

  """
  Some related `PersonalBestGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestGlobalFilter

  """
  No related `PersonalBestGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestGlobalFilter
}

"""
A filter to be used against many `Record` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyRecordFilter {
  """
  Every related `Record` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RecordFilter

  """
  Some related `Record` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RecordFilter

  """
  No related `Record` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RecordFilter
}

"""
A filter to be used against many `StatsGlobal` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyStatsGlobalFilter {
  """
  Every related `StatsGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsGlobalFilter

  """
  Some related `StatsGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsGlobalFilter

  """
  No related `StatsGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsGlobalFilter
}

"""
A filter to be used against `StatsGlobal` object types. All fields are combined with a logical ‘and.’
"""
input StatsGlobalFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """A related `levelByIdLevel` exists."""
  levelByIdLevelExists: Boolean

  """Checks for all expressions in this list."""
  and: [StatsGlobalFilter!]

  """Checks for any expressions in this list."""
  or: [StatsGlobalFilter!]

  """Negates the expression."""
  not: StatsGlobalFilter
}

"""
A filter to be used against many `Upvote` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyUpvoteFilter {
  """
  Every related `Upvote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UpvoteFilter

  """
  Some related `Upvote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UpvoteFilter

  """
  No related `Upvote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UpvoteFilter
}

"""
A filter to be used against `Upvote` object types. All fields are combined with a logical ‘and.’
"""
input UpvoteFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [UpvoteFilter!]

  """Checks for any expressions in this list."""
  or: [UpvoteFilter!]

  """Negates the expression."""
  not: UpvoteFilter
}

"""
A filter to be used against many `WorldRecordGlobal` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyWorldRecordGlobalFilter {
  """
  Every related `WorldRecordGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordGlobalFilter

  """
  Some related `WorldRecordGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordGlobalFilter

  """
  No related `WorldRecordGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordGlobalFilter
}

"""
A filter to be used against many `PersonalBestYearly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyPersonalBestYearlyFilter {
  """
  Every related `PersonalBestYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestYearlyFilter

  """
  Some related `PersonalBestYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestYearlyFilter

  """
  No related `PersonalBestYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestYearlyFilter
}

"""
A filter to be used against `PersonalBestYearly` object types. All fields are combined with a logical ‘and.’
"""
input PersonalBestYearlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [PersonalBestYearlyFilter!]

  """Checks for any expressions in this list."""
  or: [PersonalBestYearlyFilter!]

  """Negates the expression."""
  not: PersonalBestYearlyFilter
}

"""
A filter to be used against many `PersonalBestMonthly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyPersonalBestMonthlyFilter {
  """
  Every related `PersonalBestMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestMonthlyFilter

  """
  Some related `PersonalBestMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestMonthlyFilter

  """
  No related `PersonalBestMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestMonthlyFilter
}

"""
A filter to be used against `PersonalBestMonthly` object types. All fields are combined with a logical ‘and.’
"""
input PersonalBestMonthlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `month` field."""
  month: IntFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [PersonalBestMonthlyFilter!]

  """Checks for any expressions in this list."""
  or: [PersonalBestMonthlyFilter!]

  """Negates the expression."""
  not: PersonalBestMonthlyFilter
}

"""
A filter to be used against many `PersonalBestWeekly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyPersonalBestWeeklyFilter {
  """
  Every related `PersonalBestWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestWeeklyFilter

  """
  Some related `PersonalBestWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestWeeklyFilter

  """
  No related `PersonalBestWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestWeeklyFilter
}

"""
A filter to be used against `PersonalBestWeekly` object types. All fields are combined with a logical ‘and.’
"""
input PersonalBestWeeklyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `week` field."""
  week: IntFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [PersonalBestWeeklyFilter!]

  """Checks for any expressions in this list."""
  or: [PersonalBestWeeklyFilter!]

  """Negates the expression."""
  not: PersonalBestWeeklyFilter
}

"""
A filter to be used against many `PersonalBestDaily` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyPersonalBestDailyFilter {
  """
  Every related `PersonalBestDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestDailyFilter

  """
  Some related `PersonalBestDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestDailyFilter

  """
  No related `PersonalBestDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestDailyFilter
}

"""
A filter to be used against `PersonalBestDaily` object types. All fields are combined with a logical ‘and.’
"""
input PersonalBestDailyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `day` field."""
  day: IntFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [PersonalBestDailyFilter!]

  """Checks for any expressions in this list."""
  or: [PersonalBestDailyFilter!]

  """Negates the expression."""
  not: PersonalBestDailyFilter
}

"""
A filter to be used against many `WorldRecordMonthly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyWorldRecordMonthlyFilter {
  """
  Every related `WorldRecordMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordMonthlyFilter

  """
  Some related `WorldRecordMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordMonthlyFilter

  """
  No related `WorldRecordMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordMonthlyFilter
}

"""
A filter to be used against `WorldRecordMonthly` object types. All fields are combined with a logical ‘and.’
"""
input WorldRecordMonthlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `month` field."""
  month: IntFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [WorldRecordMonthlyFilter!]

  """Checks for any expressions in this list."""
  or: [WorldRecordMonthlyFilter!]

  """Negates the expression."""
  not: WorldRecordMonthlyFilter
}

"""
A filter to be used against many `WorldRecordYearly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyWorldRecordYearlyFilter {
  """
  Every related `WorldRecordYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordYearlyFilter

  """
  Some related `WorldRecordYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordYearlyFilter

  """
  No related `WorldRecordYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordYearlyFilter
}

"""
A filter to be used against `WorldRecordYearly` object types. All fields are combined with a logical ‘and.’
"""
input WorldRecordYearlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [WorldRecordYearlyFilter!]

  """Checks for any expressions in this list."""
  or: [WorldRecordYearlyFilter!]

  """Negates the expression."""
  not: WorldRecordYearlyFilter
}

"""
A filter to be used against many `WorldRecordWeekly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyWorldRecordWeeklyFilter {
  """
  Every related `WorldRecordWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordWeeklyFilter

  """
  Some related `WorldRecordWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordWeeklyFilter

  """
  No related `WorldRecordWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordWeeklyFilter
}

"""
A filter to be used against `WorldRecordWeekly` object types. All fields are combined with a logical ‘and.’
"""
input WorldRecordWeeklyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `week` field."""
  week: IntFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """A related `levelByIdLevel` exists."""
  levelByIdLevelExists: Boolean

  """Checks for all expressions in this list."""
  and: [WorldRecordWeeklyFilter!]

  """Checks for any expressions in this list."""
  or: [WorldRecordWeeklyFilter!]

  """Negates the expression."""
  not: WorldRecordWeeklyFilter
}

"""
A filter to be used against many `WorldRecordDaily` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyWorldRecordDailyFilter {
  """
  Every related `WorldRecordDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordDailyFilter

  """
  Some related `WorldRecordDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordDailyFilter

  """
  No related `WorldRecordDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordDailyFilter
}

"""
A filter to be used against `WorldRecordDaily` object types. All fields are combined with a logical ‘and.’
"""
input WorldRecordDailyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `day` field."""
  day: IntFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [WorldRecordDailyFilter!]

  """Checks for any expressions in this list."""
  or: [WorldRecordDailyFilter!]

  """Negates the expression."""
  not: WorldRecordDailyFilter
}

"""
A filter to be used against many `StatsMonthly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyStatsMonthlyFilter {
  """
  Every related `StatsMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsMonthlyFilter

  """
  Some related `StatsMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsMonthlyFilter

  """
  No related `StatsMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsMonthlyFilter
}

"""
A filter to be used against `StatsMonthly` object types. All fields are combined with a logical ‘and.’
"""
input StatsMonthlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `month` field."""
  month: IntFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """A related `levelByIdLevel` exists."""
  levelByIdLevelExists: Boolean

  """Checks for all expressions in this list."""
  and: [StatsMonthlyFilter!]

  """Checks for any expressions in this list."""
  or: [StatsMonthlyFilter!]

  """Negates the expression."""
  not: StatsMonthlyFilter
}

"""
A filter to be used against many `StatsYearly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyStatsYearlyFilter {
  """
  Every related `StatsYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsYearlyFilter

  """
  Some related `StatsYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsYearlyFilter

  """
  No related `StatsYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsYearlyFilter
}

"""
A filter to be used against `StatsYearly` object types. All fields are combined with a logical ‘and.’
"""
input StatsYearlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """A related `levelByIdLevel` exists."""
  levelByIdLevelExists: Boolean

  """Checks for all expressions in this list."""
  and: [StatsYearlyFilter!]

  """Checks for any expressions in this list."""
  or: [StatsYearlyFilter!]

  """Negates the expression."""
  not: StatsYearlyFilter
}

"""
A filter to be used against many `StatsWeekly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyStatsWeeklyFilter {
  """
  Every related `StatsWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsWeeklyFilter

  """
  Some related `StatsWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsWeeklyFilter

  """
  No related `StatsWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsWeeklyFilter
}

"""
A filter to be used against `StatsWeekly` object types. All fields are combined with a logical ‘and.’
"""
input StatsWeeklyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `week` field."""
  week: IntFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """A related `levelByIdLevel` exists."""
  levelByIdLevelExists: Boolean

  """Checks for all expressions in this list."""
  and: [StatsWeeklyFilter!]

  """Checks for any expressions in this list."""
  or: [StatsWeeklyFilter!]

  """Negates the expression."""
  not: StatsWeeklyFilter
}

"""
A filter to be used against many `StatsDaily` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyStatsDailyFilter {
  """
  Every related `StatsDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsDailyFilter

  """
  Some related `StatsDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsDailyFilter

  """
  No related `StatsDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsDailyFilter
}

"""
A filter to be used against `StatsDaily` object types. All fields are combined with a logical ‘and.’
"""
input StatsDailyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `day` field."""
  day: IntFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """A related `levelByIdLevel` exists."""
  levelByIdLevelExists: Boolean

  """Checks for all expressions in this list."""
  and: [StatsDailyFilter!]

  """Checks for any expressions in this list."""
  or: [StatsDailyFilter!]

  """Negates the expression."""
  not: StatsDailyFilter
}

"""
A filter to be used against many `PersonalBestQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyPersonalBestQuarterlyFilter {
  """
  Every related `PersonalBestQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestQuarterlyFilter

  """
  Some related `PersonalBestQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestQuarterlyFilter

  """
  No related `PersonalBestQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestQuarterlyFilter
}

"""
A filter to be used against `PersonalBestQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input PersonalBestQuarterlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `quarter` field."""
  quarter: IntFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [PersonalBestQuarterlyFilter!]

  """Checks for any expressions in this list."""
  or: [PersonalBestQuarterlyFilter!]

  """Negates the expression."""
  not: PersonalBestQuarterlyFilter
}

"""
A filter to be used against many `StatsQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyStatsQuarterlyFilter {
  """
  Every related `StatsQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsQuarterlyFilter

  """
  Some related `StatsQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsQuarterlyFilter

  """
  No related `StatsQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsQuarterlyFilter
}

"""
A filter to be used against `StatsQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input StatsQuarterlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `quarter` field."""
  quarter: IntFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """A related `levelByIdLevel` exists."""
  levelByIdLevelExists: Boolean

  """Checks for all expressions in this list."""
  and: [StatsQuarterlyFilter!]

  """Checks for any expressions in this list."""
  or: [StatsQuarterlyFilter!]

  """Negates the expression."""
  not: StatsQuarterlyFilter
}

"""
A filter to be used against many `WorldRecordQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input LevelToManyWorldRecordQuarterlyFilter {
  """
  Every related `WorldRecordQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordQuarterlyFilter

  """
  Some related `WorldRecordQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordQuarterlyFilter

  """
  No related `WorldRecordQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordQuarterlyFilter
}

"""
A filter to be used against `WorldRecordQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input WorldRecordQuarterlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `quarter` field."""
  quarter: IntFilter

  """Filter by the object’s `recordByIdRecord` relation."""
  recordByIdRecord: RecordFilter

  """Filter by the object’s `levelByIdLevel` relation."""
  levelByIdLevel: LevelFilter

  """Checks for all expressions in this list."""
  and: [WorldRecordQuarterlyFilter!]

  """Checks for any expressions in this list."""
  or: [WorldRecordQuarterlyFilter!]

  """Negates the expression."""
  not: WorldRecordQuarterlyFilter
}

"""
A filter to be used against many `PersonalBestYearly` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyPersonalBestYearlyFilter {
  """
  Every related `PersonalBestYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestYearlyFilter

  """
  Some related `PersonalBestYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestYearlyFilter

  """
  No related `PersonalBestYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestYearlyFilter
}

"""
A filter to be used against many `PersonalBestMonthly` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyPersonalBestMonthlyFilter {
  """
  Every related `PersonalBestMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestMonthlyFilter

  """
  Some related `PersonalBestMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestMonthlyFilter

  """
  No related `PersonalBestMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestMonthlyFilter
}

"""
A filter to be used against many `PersonalBestWeekly` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyPersonalBestWeeklyFilter {
  """
  Every related `PersonalBestWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestWeeklyFilter

  """
  Some related `PersonalBestWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestWeeklyFilter

  """
  No related `PersonalBestWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestWeeklyFilter
}

"""
A filter to be used against many `PersonalBestDaily` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyPersonalBestDailyFilter {
  """
  Every related `PersonalBestDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestDailyFilter

  """
  Some related `PersonalBestDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestDailyFilter

  """
  No related `PersonalBestDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestDailyFilter
}

"""
A filter to be used against many `WorldRecordMonthly` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyWorldRecordMonthlyFilter {
  """
  Every related `WorldRecordMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordMonthlyFilter

  """
  Some related `WorldRecordMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordMonthlyFilter

  """
  No related `WorldRecordMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordMonthlyFilter
}

"""
A filter to be used against many `WorldRecordYearly` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyWorldRecordYearlyFilter {
  """
  Every related `WorldRecordYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordYearlyFilter

  """
  Some related `WorldRecordYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordYearlyFilter

  """
  No related `WorldRecordYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordYearlyFilter
}

"""
A filter to be used against many `WorldRecordWeekly` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyWorldRecordWeeklyFilter {
  """
  Every related `WorldRecordWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordWeeklyFilter

  """
  Some related `WorldRecordWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordWeeklyFilter

  """
  No related `WorldRecordWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordWeeklyFilter
}

"""
A filter to be used against many `WorldRecordDaily` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyWorldRecordDailyFilter {
  """
  Every related `WorldRecordDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordDailyFilter

  """
  Some related `WorldRecordDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordDailyFilter

  """
  No related `WorldRecordDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordDailyFilter
}

"""
A filter to be used against many `PersonalBestQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyPersonalBestQuarterlyFilter {
  """
  Every related `PersonalBestQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestQuarterlyFilter

  """
  Some related `PersonalBestQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestQuarterlyFilter

  """
  No related `PersonalBestQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestQuarterlyFilter
}

"""
A filter to be used against many `WorldRecordQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input RecordToManyWorldRecordQuarterlyFilter {
  """
  Every related `WorldRecordQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WorldRecordQuarterlyFilter

  """
  Some related `WorldRecordQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WorldRecordQuarterlyFilter

  """
  No related `WorldRecordQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WorldRecordQuarterlyFilter
}

"""
A filter to be used against many `UserPoint` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserPointFilter {
  """
  Every related `UserPoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserPointFilter

  """
  Some related `UserPoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserPointFilter

  """
  No related `UserPoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserPointFilter
}

"""
A filter to be used against `UserPoint` object types. All fields are combined with a logical ‘and.’
"""
input UserPointFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `points` field."""
  points: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `rank` field."""
  rank: IntFilter

  """Filter by the object’s `worldRecords` field."""
  worldRecords: IntFilter

  """Filter by the object’s `userByIdUser` relation."""
  userByIdUser: UserFilter

  """Checks for all expressions in this list."""
  and: [UserPointFilter!]

  """Checks for any expressions in this list."""
  or: [UserPointFilter!]

  """Negates the expression."""
  not: UserPointFilter
}

"""
A filter to be used against many `Record` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRecordFilter {
  """
  Every related `Record` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RecordFilter

  """
  Some related `Record` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RecordFilter

  """
  No related `Record` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RecordFilter
}

"""
A filter to be used against many `StatsGlobal` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyStatsGlobalFilter {
  """
  Every related `StatsGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsGlobalFilter

  """
  Some related `StatsGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsGlobalFilter

  """
  No related `StatsGlobal` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsGlobalFilter
}

"""
A filter to be used against many `Upvote` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUpvoteFilter {
  """
  Every related `Upvote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UpvoteFilter

  """
  Some related `Upvote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UpvoteFilter

  """
  No related `Upvote` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UpvoteFilter
}

"""
A filter to be used against many `PersonalBestYearly` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPersonalBestYearlyFilter {
  """
  Every related `PersonalBestYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestYearlyFilter

  """
  Some related `PersonalBestYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestYearlyFilter

  """
  No related `PersonalBestYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestYearlyFilter
}

"""
A filter to be used against many `PersonalBestMonthly` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPersonalBestMonthlyFilter {
  """
  Every related `PersonalBestMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestMonthlyFilter

  """
  Some related `PersonalBestMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestMonthlyFilter

  """
  No related `PersonalBestMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestMonthlyFilter
}

"""
A filter to be used against many `PersonalBestWeekly` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPersonalBestWeeklyFilter {
  """
  Every related `PersonalBestWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestWeeklyFilter

  """
  Some related `PersonalBestWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestWeeklyFilter

  """
  No related `PersonalBestWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestWeeklyFilter
}

"""
A filter to be used against many `PersonalBestDaily` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPersonalBestDailyFilter {
  """
  Every related `PersonalBestDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestDailyFilter

  """
  Some related `PersonalBestDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestDailyFilter

  """
  No related `PersonalBestDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestDailyFilter
}

"""
A filter to be used against many `StatsMonthly` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyStatsMonthlyFilter {
  """
  Every related `StatsMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsMonthlyFilter

  """
  Some related `StatsMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsMonthlyFilter

  """
  No related `StatsMonthly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsMonthlyFilter
}

"""
A filter to be used against many `StatsYearly` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyStatsYearlyFilter {
  """
  Every related `StatsYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsYearlyFilter

  """
  Some related `StatsYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsYearlyFilter

  """
  No related `StatsYearly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsYearlyFilter
}

"""
A filter to be used against many `StatsWeekly` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyStatsWeeklyFilter {
  """
  Every related `StatsWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsWeeklyFilter

  """
  Some related `StatsWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsWeeklyFilter

  """
  No related `StatsWeekly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsWeeklyFilter
}

"""
A filter to be used against many `StatsDaily` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyStatsDailyFilter {
  """
  Every related `StatsDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsDailyFilter

  """
  Some related `StatsDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsDailyFilter

  """
  No related `StatsDaily` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsDailyFilter
}

"""
A filter to be used against many `PersonalBestQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPersonalBestQuarterlyFilter {
  """
  Every related `PersonalBestQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PersonalBestQuarterlyFilter

  """
  Some related `PersonalBestQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PersonalBestQuarterlyFilter

  """
  No related `PersonalBestQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PersonalBestQuarterlyFilter
}

"""
A filter to be used against many `StatsQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyStatsQuarterlyFilter {
  """
  Every related `StatsQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StatsQuarterlyFilter

  """
  Some related `StatsQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StatsQuarterlyFilter

  """
  No related `StatsQuarterly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StatsQuarterlyFilter
}

"""A connection to a list of `PersonalBestGlobal` values."""
type PersonalBestGlobalsConnection {
  """A list of `PersonalBestGlobal` objects."""
  nodes: [PersonalBestGlobal]!

  """
  A list of edges which contains the `PersonalBestGlobal` and cursor to aid in pagination.
  """
  edges: [PersonalBestGlobalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PersonalBestGlobal` you could get from the connection.
  """
  totalCount: Int!
}

type PersonalBestGlobal implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idUser: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime

  """Reads a single `Record` that is related to this `PersonalBestGlobal`."""
  recordByIdRecord: Record

  """Reads a single `User` that is related to this `PersonalBestGlobal`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `PersonalBestGlobal`."""
  levelByIdLevel: Level
}

type Record implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idUser: Int!
  time: Float!
  gameVersion: String!
  isValid: Boolean!
  idLevel: Int!
  modVersion: String!
  dateCreated: Datetime!
  dateUpdated: Datetime
  splits: [Float]
  speeds: [Float]

  """Reads a single `User` that is related to this `Record`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `Record`."""
  levelByIdLevel: Level

  """Reads and enables pagination through a set of `RecordMedia`."""
  recordMediasByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RecordMedia`."""
    orderBy: [RecordMediasOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecordMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RecordMediaFilter
  ): RecordMediasConnection!

  """Reads and enables pagination through a set of `PersonalBestGlobal`."""
  personalBestGlobalsByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestGlobal`."""
    orderBy: [PersonalBestGlobalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestGlobalFilter
  ): PersonalBestGlobalsConnection!

  """Reads and enables pagination through a set of `WorldRecordGlobal`."""
  worldRecordGlobalsByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordGlobal`."""
    orderBy: [WorldRecordGlobalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordGlobalFilter
  ): WorldRecordGlobalsConnection!

  """Reads and enables pagination through a set of `PersonalBestYearly`."""
  personalBestYearliesByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestYearly`."""
    orderBy: [PersonalBestYearliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestYearlyFilter
  ): PersonalBestYearliesConnection!

  """Reads and enables pagination through a set of `PersonalBestMonthly`."""
  personalBestMonthliesByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestMonthly`."""
    orderBy: [PersonalBestMonthliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestMonthlyFilter
  ): PersonalBestMonthliesConnection!

  """Reads and enables pagination through a set of `PersonalBestWeekly`."""
  personalBestWeekliesByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestWeekly`."""
    orderBy: [PersonalBestWeekliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestWeeklyFilter
  ): PersonalBestWeekliesConnection!

  """Reads and enables pagination through a set of `PersonalBestDaily`."""
  personalBestDailiesByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestDaily`."""
    orderBy: [PersonalBestDailiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestDailyFilter
  ): PersonalBestDailiesConnection!

  """Reads and enables pagination through a set of `WorldRecordMonthly`."""
  worldRecordMonthliesByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordMonthly`."""
    orderBy: [WorldRecordMonthliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordMonthlyFilter
  ): WorldRecordMonthliesConnection!

  """Reads and enables pagination through a set of `WorldRecordYearly`."""
  worldRecordYearliesByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordYearly`."""
    orderBy: [WorldRecordYearliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordYearlyFilter
  ): WorldRecordYearliesConnection!

  """Reads and enables pagination through a set of `WorldRecordWeekly`."""
  worldRecordWeekliesByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordWeekly`."""
    orderBy: [WorldRecordWeekliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordWeeklyFilter
  ): WorldRecordWeekliesConnection!

  """Reads and enables pagination through a set of `WorldRecordDaily`."""
  worldRecordDailiesByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordDaily`."""
    orderBy: [WorldRecordDailiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordDailyFilter
  ): WorldRecordDailiesConnection!

  """Reads and enables pagination through a set of `PersonalBestQuarterly`."""
  personalBestQuarterliesByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestQuarterly`."""
    orderBy: [PersonalBestQuarterliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestQuarterlyFilter
  ): PersonalBestQuarterliesConnection!

  """Reads and enables pagination through a set of `WorldRecordQuarterly`."""
  worldRecordQuarterliesByIdRecord(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordQuarterly`."""
    orderBy: [WorldRecordQuarterliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordQuarterlyFilter
  ): WorldRecordQuarterliesConnection!
}

type Level implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  hash: String!
  dateCreated: Datetime!
  dateUpdated: Datetime

  """Reads and enables pagination through a set of `Favorite`."""
  favoritesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Favorite`."""
    orderBy: [FavoritesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FavoriteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FavoriteFilter
  ): FavoritesConnection!

  """Reads and enables pagination through a set of `LevelPoint`."""
  levelPointsByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LevelPoint`."""
    orderBy: [LevelPointsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevelPointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LevelPointFilter
  ): LevelPointsConnection!

  """Reads and enables pagination through a set of `LevelItem`."""
  levelItemsByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LevelItem`."""
    orderBy: [LevelItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevelItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LevelItemFilter
  ): LevelItemsConnection!

  """Reads and enables pagination through a set of `LevelMetadatum`."""
  levelMetadataByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LevelMetadatum`."""
    orderBy: [LevelMetadataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevelMetadatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LevelMetadatumFilter
  ): LevelMetadataConnection!

  """Reads and enables pagination through a set of `PersonalBestGlobal`."""
  personalBestGlobalsByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestGlobal`."""
    orderBy: [PersonalBestGlobalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestGlobalFilter
  ): PersonalBestGlobalsConnection!

  """Reads and enables pagination through a set of `Record`."""
  recordsByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Record`."""
    orderBy: [RecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RecordFilter
  ): RecordsConnection!

  """Reads and enables pagination through a set of `StatsGlobal`."""
  statsGlobalsByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsGlobal`."""
    orderBy: [StatsGlobalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsGlobalFilter
  ): StatsGlobalsConnection!

  """Reads and enables pagination through a set of `Upvote`."""
  upvotesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Upvote`."""
    orderBy: [UpvotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpvoteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UpvoteFilter
  ): UpvotesConnection!

  """Reads and enables pagination through a set of `WorldRecordGlobal`."""
  worldRecordGlobalsByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordGlobal`."""
    orderBy: [WorldRecordGlobalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordGlobalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordGlobalFilter
  ): WorldRecordGlobalsConnection!

  """Reads and enables pagination through a set of `PersonalBestYearly`."""
  personalBestYearliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestYearly`."""
    orderBy: [PersonalBestYearliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestYearlyFilter
  ): PersonalBestYearliesConnection!

  """Reads and enables pagination through a set of `PersonalBestMonthly`."""
  personalBestMonthliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestMonthly`."""
    orderBy: [PersonalBestMonthliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestMonthlyFilter
  ): PersonalBestMonthliesConnection!

  """Reads and enables pagination through a set of `PersonalBestWeekly`."""
  personalBestWeekliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestWeekly`."""
    orderBy: [PersonalBestWeekliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestWeeklyFilter
  ): PersonalBestWeekliesConnection!

  """Reads and enables pagination through a set of `PersonalBestDaily`."""
  personalBestDailiesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestDaily`."""
    orderBy: [PersonalBestDailiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestDailyFilter
  ): PersonalBestDailiesConnection!

  """Reads and enables pagination through a set of `WorldRecordMonthly`."""
  worldRecordMonthliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordMonthly`."""
    orderBy: [WorldRecordMonthliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordMonthlyFilter
  ): WorldRecordMonthliesConnection!

  """Reads and enables pagination through a set of `WorldRecordYearly`."""
  worldRecordYearliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordYearly`."""
    orderBy: [WorldRecordYearliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordYearlyFilter
  ): WorldRecordYearliesConnection!

  """Reads and enables pagination through a set of `WorldRecordWeekly`."""
  worldRecordWeekliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordWeekly`."""
    orderBy: [WorldRecordWeekliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordWeeklyFilter
  ): WorldRecordWeekliesConnection!

  """Reads and enables pagination through a set of `WorldRecordDaily`."""
  worldRecordDailiesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordDaily`."""
    orderBy: [WorldRecordDailiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordDailyFilter
  ): WorldRecordDailiesConnection!

  """Reads and enables pagination through a set of `StatsMonthly`."""
  statsMonthliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsMonthly`."""
    orderBy: [StatsMonthliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsMonthlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsMonthlyFilter
  ): StatsMonthliesConnection!

  """Reads and enables pagination through a set of `StatsYearly`."""
  statsYearliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsYearly`."""
    orderBy: [StatsYearliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsYearlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsYearlyFilter
  ): StatsYearliesConnection!

  """Reads and enables pagination through a set of `StatsWeekly`."""
  statsWeekliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsWeekly`."""
    orderBy: [StatsWeekliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsWeeklyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsWeeklyFilter
  ): StatsWeekliesConnection!

  """Reads and enables pagination through a set of `StatsDaily`."""
  statsDailiesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsDaily`."""
    orderBy: [StatsDailiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsDailyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsDailyFilter
  ): StatsDailiesConnection!

  """Reads and enables pagination through a set of `PersonalBestQuarterly`."""
  personalBestQuarterliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonalBestQuarterly`."""
    orderBy: [PersonalBestQuarterliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonalBestQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersonalBestQuarterlyFilter
  ): PersonalBestQuarterliesConnection!

  """Reads and enables pagination through a set of `StatsQuarterly`."""
  statsQuarterliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StatsQuarterly`."""
    orderBy: [StatsQuarterliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatsQuarterlyFilter
  ): StatsQuarterliesConnection!

  """Reads and enables pagination through a set of `WorldRecordQuarterly`."""
  worldRecordQuarterliesByIdLevel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WorldRecordQuarterly`."""
    orderBy: [WorldRecordQuarterliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WorldRecordQuarterlyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WorldRecordQuarterlyFilter
  ): WorldRecordQuarterliesConnection!
}

"""A connection to a list of `LevelPoint` values."""
type LevelPointsConnection {
  """A list of `LevelPoint` objects."""
  nodes: [LevelPoint]!

  """
  A list of edges which contains the `LevelPoint` and cursor to aid in pagination.
  """
  edges: [LevelPointsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LevelPoint` you could get from the connection."""
  totalCount: Int!
}

type LevelPoint implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  points: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime

  """Reads a single `Level` that is related to this `LevelPoint`."""
  levelByIdLevel: Level
}

"""A `LevelPoint` edge in the connection."""
type LevelPointsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LevelPoint` at the end of the edge."""
  node: LevelPoint
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `LevelPoint`."""
enum LevelPointsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POINTS_ASC
  POINTS_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LevelPoint` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LevelPointCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `points` field."""
  points: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""A connection to a list of `LevelItem` values."""
type LevelItemsConnection {
  """A list of `LevelItem` objects."""
  nodes: [LevelItem]!

  """
  A list of edges which contains the `LevelItem` and cursor to aid in pagination.
  """
  edges: [LevelItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LevelItem` you could get from the connection."""
  totalCount: Int!
}

type LevelItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idLevel: Int!
  workshopId: BigFloat!
  authorId: BigFloat!
  name: String!
  imageUrl: String!
  fileAuthor: String!
  fileUid: String!
  validationTimeAuthor: Float!
  validationTimeGold: Float!
  validationTimeSilver: Float!
  validationTimeBronze: Float!
  deleted: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!
  dateCreated: Datetime!
  dateUpdated: Datetime

  """Reads a single `Level` that is related to this `LevelItem`."""
  levelByIdLevel: Level
}

"""A `LevelItem` edge in the connection."""
type LevelItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LevelItem` at the end of the edge."""
  node: LevelItem
}

"""Methods to use when ordering `LevelItem`."""
enum LevelItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  WORKSHOP_ID_ASC
  WORKSHOP_ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  NAME_ASC
  NAME_DESC
  IMAGE_URL_ASC
  IMAGE_URL_DESC
  FILE_AUTHOR_ASC
  FILE_AUTHOR_DESC
  FILE_UID_ASC
  FILE_UID_DESC
  VALIDATION_TIME_AUTHOR_ASC
  VALIDATION_TIME_AUTHOR_DESC
  VALIDATION_TIME_GOLD_ASC
  VALIDATION_TIME_GOLD_DESC
  VALIDATION_TIME_SILVER_ASC
  VALIDATION_TIME_SILVER_DESC
  VALIDATION_TIME_BRONZE_ASC
  VALIDATION_TIME_BRONZE_DESC
  DELETED_ASC
  DELETED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LevelItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LevelItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `workshopId` field."""
  workshopId: BigFloat

  """Checks for equality with the object’s `authorId` field."""
  authorId: BigFloat

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `imageUrl` field."""
  imageUrl: String

  """Checks for equality with the object’s `fileAuthor` field."""
  fileAuthor: String

  """Checks for equality with the object’s `fileUid` field."""
  fileUid: String

  """Checks for equality with the object’s `validationTimeAuthor` field."""
  validationTimeAuthor: Float

  """Checks for equality with the object’s `validationTimeGold` field."""
  validationTimeGold: Float

  """Checks for equality with the object’s `validationTimeSilver` field."""
  validationTimeSilver: Float

  """Checks for equality with the object’s `validationTimeBronze` field."""
  validationTimeBronze: Float

  """Checks for equality with the object’s `deleted` field."""
  deleted: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""A connection to a list of `LevelMetadatum` values."""
type LevelMetadataConnection {
  """A list of `LevelMetadatum` objects."""
  nodes: [LevelMetadatum]!

  """
  A list of edges which contains the `LevelMetadatum` and cursor to aid in pagination.
  """
  edges: [LevelMetadataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LevelMetadatum` you could get from the connection."""
  totalCount: Int!
}

type LevelMetadatum implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idLevel: Int!
  amountCheckpoints: Int!
  amountFinishes: Int!
  amountBlocks: Int!
  typeGround: Int!
  typeSkybox: Int!
  blocks: JSON!
  dateCreated: Datetime!
  dateUpdated: Datetime

  """Reads a single `Level` that is related to this `LevelMetadatum`."""
  levelByIdLevel: Level
}

"""A `LevelMetadatum` edge in the connection."""
type LevelMetadataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LevelMetadatum` at the end of the edge."""
  node: LevelMetadatum
}

"""Methods to use when ordering `LevelMetadatum`."""
enum LevelMetadataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  AMOUNT_CHECKPOINTS_ASC
  AMOUNT_CHECKPOINTS_DESC
  AMOUNT_FINISHES_ASC
  AMOUNT_FINISHES_DESC
  AMOUNT_BLOCKS_ASC
  AMOUNT_BLOCKS_DESC
  TYPE_GROUND_ASC
  TYPE_GROUND_DESC
  TYPE_SKYBOX_ASC
  TYPE_SKYBOX_DESC
  BLOCKS_ASC
  BLOCKS_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LevelMetadatum` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LevelMetadatumCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `amountCheckpoints` field."""
  amountCheckpoints: Int

  """Checks for equality with the object’s `amountFinishes` field."""
  amountFinishes: Int

  """Checks for equality with the object’s `amountBlocks` field."""
  amountBlocks: Int

  """Checks for equality with the object’s `typeGround` field."""
  typeGround: Int

  """Checks for equality with the object’s `typeSkybox` field."""
  typeSkybox: Int

  """Checks for equality with the object’s `blocks` field."""
  blocks: JSON

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""Methods to use when ordering `PersonalBestGlobal`."""
enum PersonalBestGlobalsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PersonalBestGlobal` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PersonalBestGlobalCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""A connection to a list of `Record` values."""
type RecordsConnection {
  """A list of `Record` objects."""
  nodes: [Record]!

  """
  A list of edges which contains the `Record` and cursor to aid in pagination.
  """
  edges: [RecordsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Record` you could get from the connection."""
  totalCount: Int!
}

"""A `Record` edge in the connection."""
type RecordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Record` at the end of the edge."""
  node: Record
}

"""Methods to use when ordering `Record`."""
enum RecordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  TIME_ASC
  TIME_DESC
  GAME_VERSION_ASC
  GAME_VERSION_DESC
  IS_VALID_ASC
  IS_VALID_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  MOD_VERSION_ASC
  MOD_VERSION_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  SPLITS_ASC
  SPLITS_DESC
  SPEEDS_ASC
  SPEEDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Record` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RecordCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `time` field."""
  time: Float

  """Checks for equality with the object’s `gameVersion` field."""
  gameVersion: String

  """Checks for equality with the object’s `isValid` field."""
  isValid: Boolean

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `modVersion` field."""
  modVersion: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `splits` field."""
  splits: [Float]

  """Checks for equality with the object’s `speeds` field."""
  speeds: [Float]
}

"""A connection to a list of `StatsGlobal` values."""
type StatsGlobalsConnection {
  """A list of `StatsGlobal` objects."""
  nodes: [StatsGlobal]!

  """
  A list of edges which contains the `StatsGlobal` and cursor to aid in pagination.
  """
  edges: [StatsGlobalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StatsGlobal` you could get from the connection."""
  totalCount: Int!
}

type StatsGlobal implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idUser: Int!
  idLevel: Int
  key: String!
  dateCreated: Datetime!
  dateUpdated: Datetime
  value: BigFloat!

  """Reads a single `User` that is related to this `StatsGlobal`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `StatsGlobal`."""
  levelByIdLevel: Level
}

"""A `StatsGlobal` edge in the connection."""
type StatsGlobalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StatsGlobal` at the end of the edge."""
  node: StatsGlobal
}

"""Methods to use when ordering `StatsGlobal`."""
enum StatsGlobalsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StatsGlobal` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StatsGlobalCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""A connection to a list of `Upvote` values."""
type UpvotesConnection {
  """A list of `Upvote` objects."""
  nodes: [Upvote]!

  """
  A list of edges which contains the `Upvote` and cursor to aid in pagination.
  """
  edges: [UpvotesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Upvote` you could get from the connection."""
  totalCount: Int!
}

type Upvote implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idUser: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime

  """Reads a single `User` that is related to this `Upvote`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `Upvote`."""
  levelByIdLevel: Level
}

"""A `Upvote` edge in the connection."""
type UpvotesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Upvote` at the end of the edge."""
  node: Upvote
}

"""Methods to use when ordering `Upvote`."""
enum UpvotesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Upvote` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UpvoteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""A connection to a list of `WorldRecordGlobal` values."""
type WorldRecordGlobalsConnection {
  """A list of `WorldRecordGlobal` objects."""
  nodes: [WorldRecordGlobal]!

  """
  A list of edges which contains the `WorldRecordGlobal` and cursor to aid in pagination.
  """
  edges: [WorldRecordGlobalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `WorldRecordGlobal` you could get from the connection.
  """
  totalCount: Int!
}

type WorldRecordGlobal implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime

  """Reads a single `Record` that is related to this `WorldRecordGlobal`."""
  recordByIdRecord: Record

  """Reads a single `Level` that is related to this `WorldRecordGlobal`."""
  levelByIdLevel: Level
}

"""A `WorldRecordGlobal` edge in the connection."""
type WorldRecordGlobalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WorldRecordGlobal` at the end of the edge."""
  node: WorldRecordGlobal
}

"""Methods to use when ordering `WorldRecordGlobal`."""
enum WorldRecordGlobalsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `WorldRecordGlobal` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input WorldRecordGlobalCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""A connection to a list of `PersonalBestYearly` values."""
type PersonalBestYearliesConnection {
  """A list of `PersonalBestYearly` objects."""
  nodes: [PersonalBestYearly]!

  """
  A list of edges which contains the `PersonalBestYearly` and cursor to aid in pagination.
  """
  edges: [PersonalBestYearliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PersonalBestYearly` you could get from the connection.
  """
  totalCount: Int!
}

type PersonalBestYearly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idUser: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!

  """Reads a single `Record` that is related to this `PersonalBestYearly`."""
  recordByIdRecord: Record

  """Reads a single `User` that is related to this `PersonalBestYearly`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `PersonalBestYearly`."""
  levelByIdLevel: Level
}

"""A `PersonalBestYearly` edge in the connection."""
type PersonalBestYearliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersonalBestYearly` at the end of the edge."""
  node: PersonalBestYearly
}

"""Methods to use when ordering `PersonalBestYearly`."""
enum PersonalBestYearliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PersonalBestYearly` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PersonalBestYearlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""A connection to a list of `PersonalBestMonthly` values."""
type PersonalBestMonthliesConnection {
  """A list of `PersonalBestMonthly` objects."""
  nodes: [PersonalBestMonthly]!

  """
  A list of edges which contains the `PersonalBestMonthly` and cursor to aid in pagination.
  """
  edges: [PersonalBestMonthliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PersonalBestMonthly` you could get from the connection.
  """
  totalCount: Int!
}

type PersonalBestMonthly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idUser: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  month: Int!

  """Reads a single `Record` that is related to this `PersonalBestMonthly`."""
  recordByIdRecord: Record

  """Reads a single `User` that is related to this `PersonalBestMonthly`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `PersonalBestMonthly`."""
  levelByIdLevel: Level
}

"""A `PersonalBestMonthly` edge in the connection."""
type PersonalBestMonthliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersonalBestMonthly` at the end of the edge."""
  node: PersonalBestMonthly
}

"""Methods to use when ordering `PersonalBestMonthly`."""
enum PersonalBestMonthliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PersonalBestMonthly` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input PersonalBestMonthlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `month` field."""
  month: Int
}

"""A connection to a list of `PersonalBestWeekly` values."""
type PersonalBestWeekliesConnection {
  """A list of `PersonalBestWeekly` objects."""
  nodes: [PersonalBestWeekly]!

  """
  A list of edges which contains the `PersonalBestWeekly` and cursor to aid in pagination.
  """
  edges: [PersonalBestWeekliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PersonalBestWeekly` you could get from the connection.
  """
  totalCount: Int!
}

type PersonalBestWeekly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idUser: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  week: Int!

  """Reads a single `Record` that is related to this `PersonalBestWeekly`."""
  recordByIdRecord: Record

  """Reads a single `User` that is related to this `PersonalBestWeekly`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `PersonalBestWeekly`."""
  levelByIdLevel: Level
}

"""A `PersonalBestWeekly` edge in the connection."""
type PersonalBestWeekliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersonalBestWeekly` at the end of the edge."""
  node: PersonalBestWeekly
}

"""Methods to use when ordering `PersonalBestWeekly`."""
enum PersonalBestWeekliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  WEEK_ASC
  WEEK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PersonalBestWeekly` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PersonalBestWeeklyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `week` field."""
  week: Int
}

"""A connection to a list of `PersonalBestDaily` values."""
type PersonalBestDailiesConnection {
  """A list of `PersonalBestDaily` objects."""
  nodes: [PersonalBestDaily]!

  """
  A list of edges which contains the `PersonalBestDaily` and cursor to aid in pagination.
  """
  edges: [PersonalBestDailiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PersonalBestDaily` you could get from the connection.
  """
  totalCount: Int!
}

type PersonalBestDaily implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idUser: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  day: Int!

  """Reads a single `Record` that is related to this `PersonalBestDaily`."""
  recordByIdRecord: Record

  """Reads a single `User` that is related to this `PersonalBestDaily`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `PersonalBestDaily`."""
  levelByIdLevel: Level
}

"""A `PersonalBestDaily` edge in the connection."""
type PersonalBestDailiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersonalBestDaily` at the end of the edge."""
  node: PersonalBestDaily
}

"""Methods to use when ordering `PersonalBestDaily`."""
enum PersonalBestDailiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  DAY_ASC
  DAY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PersonalBestDaily` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PersonalBestDailyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `day` field."""
  day: Int
}

"""A connection to a list of `WorldRecordMonthly` values."""
type WorldRecordMonthliesConnection {
  """A list of `WorldRecordMonthly` objects."""
  nodes: [WorldRecordMonthly]!

  """
  A list of edges which contains the `WorldRecordMonthly` and cursor to aid in pagination.
  """
  edges: [WorldRecordMonthliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `WorldRecordMonthly` you could get from the connection.
  """
  totalCount: Int!
}

type WorldRecordMonthly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  month: Int!

  """Reads a single `Record` that is related to this `WorldRecordMonthly`."""
  recordByIdRecord: Record

  """Reads a single `Level` that is related to this `WorldRecordMonthly`."""
  levelByIdLevel: Level
}

"""A `WorldRecordMonthly` edge in the connection."""
type WorldRecordMonthliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WorldRecordMonthly` at the end of the edge."""
  node: WorldRecordMonthly
}

"""Methods to use when ordering `WorldRecordMonthly`."""
enum WorldRecordMonthliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `WorldRecordMonthly` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input WorldRecordMonthlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `month` field."""
  month: Int
}

"""A connection to a list of `WorldRecordYearly` values."""
type WorldRecordYearliesConnection {
  """A list of `WorldRecordYearly` objects."""
  nodes: [WorldRecordYearly]!

  """
  A list of edges which contains the `WorldRecordYearly` and cursor to aid in pagination.
  """
  edges: [WorldRecordYearliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `WorldRecordYearly` you could get from the connection.
  """
  totalCount: Int!
}

type WorldRecordYearly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!

  """Reads a single `Record` that is related to this `WorldRecordYearly`."""
  recordByIdRecord: Record

  """Reads a single `Level` that is related to this `WorldRecordYearly`."""
  levelByIdLevel: Level
}

"""A `WorldRecordYearly` edge in the connection."""
type WorldRecordYearliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WorldRecordYearly` at the end of the edge."""
  node: WorldRecordYearly
}

"""Methods to use when ordering `WorldRecordYearly`."""
enum WorldRecordYearliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `WorldRecordYearly` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input WorldRecordYearlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""A connection to a list of `WorldRecordWeekly` values."""
type WorldRecordWeekliesConnection {
  """A list of `WorldRecordWeekly` objects."""
  nodes: [WorldRecordWeekly]!

  """
  A list of edges which contains the `WorldRecordWeekly` and cursor to aid in pagination.
  """
  edges: [WorldRecordWeekliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `WorldRecordWeekly` you could get from the connection.
  """
  totalCount: Int!
}

type WorldRecordWeekly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idLevel: Int
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  week: Int!

  """Reads a single `Record` that is related to this `WorldRecordWeekly`."""
  recordByIdRecord: Record

  """Reads a single `Level` that is related to this `WorldRecordWeekly`."""
  levelByIdLevel: Level
}

"""A `WorldRecordWeekly` edge in the connection."""
type WorldRecordWeekliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WorldRecordWeekly` at the end of the edge."""
  node: WorldRecordWeekly
}

"""Methods to use when ordering `WorldRecordWeekly`."""
enum WorldRecordWeekliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  WEEK_ASC
  WEEK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `WorldRecordWeekly` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input WorldRecordWeeklyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `week` field."""
  week: Int
}

"""A connection to a list of `WorldRecordDaily` values."""
type WorldRecordDailiesConnection {
  """A list of `WorldRecordDaily` objects."""
  nodes: [WorldRecordDaily]!

  """
  A list of edges which contains the `WorldRecordDaily` and cursor to aid in pagination.
  """
  edges: [WorldRecordDailiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `WorldRecordDaily` you could get from the connection.
  """
  totalCount: Int!
}

type WorldRecordDaily implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  day: Int!

  """Reads a single `Record` that is related to this `WorldRecordDaily`."""
  recordByIdRecord: Record

  """Reads a single `Level` that is related to this `WorldRecordDaily`."""
  levelByIdLevel: Level
}

"""A `WorldRecordDaily` edge in the connection."""
type WorldRecordDailiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WorldRecordDaily` at the end of the edge."""
  node: WorldRecordDaily
}

"""Methods to use when ordering `WorldRecordDaily`."""
enum WorldRecordDailiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  DAY_ASC
  DAY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `WorldRecordDaily` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input WorldRecordDailyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `day` field."""
  day: Int
}

"""A connection to a list of `StatsMonthly` values."""
type StatsMonthliesConnection {
  """A list of `StatsMonthly` objects."""
  nodes: [StatsMonthly]!

  """
  A list of edges which contains the `StatsMonthly` and cursor to aid in pagination.
  """
  edges: [StatsMonthliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StatsMonthly` you could get from the connection."""
  totalCount: Int!
}

type StatsMonthly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idUser: Int!
  idLevel: Int
  key: String!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  month: Int!
  value: BigFloat!

  """Reads a single `User` that is related to this `StatsMonthly`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `StatsMonthly`."""
  levelByIdLevel: Level
}

"""A `StatsMonthly` edge in the connection."""
type StatsMonthliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StatsMonthly` at the end of the edge."""
  node: StatsMonthly
}

"""Methods to use when ordering `StatsMonthly`."""
enum StatsMonthliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StatsMonthly` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StatsMonthlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `month` field."""
  month: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""A connection to a list of `StatsYearly` values."""
type StatsYearliesConnection {
  """A list of `StatsYearly` objects."""
  nodes: [StatsYearly]!

  """
  A list of edges which contains the `StatsYearly` and cursor to aid in pagination.
  """
  edges: [StatsYearliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StatsYearly` you could get from the connection."""
  totalCount: Int!
}

type StatsYearly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idUser: Int!
  idLevel: Int
  key: String!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int
  value: BigFloat!

  """Reads a single `User` that is related to this `StatsYearly`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `StatsYearly`."""
  levelByIdLevel: Level
}

"""A `StatsYearly` edge in the connection."""
type StatsYearliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StatsYearly` at the end of the edge."""
  node: StatsYearly
}

"""Methods to use when ordering `StatsYearly`."""
enum StatsYearliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StatsYearly` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StatsYearlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""A connection to a list of `StatsWeekly` values."""
type StatsWeekliesConnection {
  """A list of `StatsWeekly` objects."""
  nodes: [StatsWeekly]!

  """
  A list of edges which contains the `StatsWeekly` and cursor to aid in pagination.
  """
  edges: [StatsWeekliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StatsWeekly` you could get from the connection."""
  totalCount: Int!
}

type StatsWeekly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idUser: Int!
  idLevel: Int
  key: String!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  week: Int!
  value: BigFloat!

  """Reads a single `User` that is related to this `StatsWeekly`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `StatsWeekly`."""
  levelByIdLevel: Level
}

"""A `StatsWeekly` edge in the connection."""
type StatsWeekliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StatsWeekly` at the end of the edge."""
  node: StatsWeekly
}

"""Methods to use when ordering `StatsWeekly`."""
enum StatsWeekliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  WEEK_ASC
  WEEK_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StatsWeekly` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StatsWeeklyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `week` field."""
  week: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""A connection to a list of `StatsDaily` values."""
type StatsDailiesConnection {
  """A list of `StatsDaily` objects."""
  nodes: [StatsDaily]!

  """
  A list of edges which contains the `StatsDaily` and cursor to aid in pagination.
  """
  edges: [StatsDailiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StatsDaily` you could get from the connection."""
  totalCount: Int!
}

type StatsDaily implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idUser: Int!
  idLevel: Int
  key: String!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  day: Int!
  value: BigFloat!

  """Reads a single `User` that is related to this `StatsDaily`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `StatsDaily`."""
  levelByIdLevel: Level
}

"""A `StatsDaily` edge in the connection."""
type StatsDailiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StatsDaily` at the end of the edge."""
  node: StatsDaily
}

"""Methods to use when ordering `StatsDaily`."""
enum StatsDailiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  DAY_ASC
  DAY_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StatsDaily` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StatsDailyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `day` field."""
  day: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""A connection to a list of `PersonalBestQuarterly` values."""
type PersonalBestQuarterliesConnection {
  """A list of `PersonalBestQuarterly` objects."""
  nodes: [PersonalBestQuarterly]!

  """
  A list of edges which contains the `PersonalBestQuarterly` and cursor to aid in pagination.
  """
  edges: [PersonalBestQuarterliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PersonalBestQuarterly` you could get from the connection.
  """
  totalCount: Int!
}

type PersonalBestQuarterly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idUser: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  quarter: Int!

  """
  Reads a single `Record` that is related to this `PersonalBestQuarterly`.
  """
  recordByIdRecord: Record

  """Reads a single `User` that is related to this `PersonalBestQuarterly`."""
  userByIdUser: User

  """
  Reads a single `Level` that is related to this `PersonalBestQuarterly`.
  """
  levelByIdLevel: Level
}

"""A `PersonalBestQuarterly` edge in the connection."""
type PersonalBestQuarterliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersonalBestQuarterly` at the end of the edge."""
  node: PersonalBestQuarterly
}

"""Methods to use when ordering `PersonalBestQuarterly`."""
enum PersonalBestQuarterliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  QUARTER_ASC
  QUARTER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PersonalBestQuarterly` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input PersonalBestQuarterlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `quarter` field."""
  quarter: Int
}

"""A connection to a list of `StatsQuarterly` values."""
type StatsQuarterliesConnection {
  """A list of `StatsQuarterly` objects."""
  nodes: [StatsQuarterly]!

  """
  A list of edges which contains the `StatsQuarterly` and cursor to aid in pagination.
  """
  edges: [StatsQuarterliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StatsQuarterly` you could get from the connection."""
  totalCount: Int!
}

type StatsQuarterly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idUser: Int!
  idLevel: Int
  key: String!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  quarter: Int!
  value: BigFloat!

  """Reads a single `User` that is related to this `StatsQuarterly`."""
  userByIdUser: User

  """Reads a single `Level` that is related to this `StatsQuarterly`."""
  levelByIdLevel: Level
}

"""A `StatsQuarterly` edge in the connection."""
type StatsQuarterliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StatsQuarterly` at the end of the edge."""
  node: StatsQuarterly
}

"""Methods to use when ordering `StatsQuarterly`."""
enum StatsQuarterliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  QUARTER_ASC
  QUARTER_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StatsQuarterly` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StatsQuarterlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `quarter` field."""
  quarter: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""A connection to a list of `WorldRecordQuarterly` values."""
type WorldRecordQuarterliesConnection {
  """A list of `WorldRecordQuarterly` objects."""
  nodes: [WorldRecordQuarterly]!

  """
  A list of edges which contains the `WorldRecordQuarterly` and cursor to aid in pagination.
  """
  edges: [WorldRecordQuarterliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `WorldRecordQuarterly` you could get from the connection.
  """
  totalCount: Int!
}

type WorldRecordQuarterly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  idLevel: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  year: Int!
  quarter: Int!

  """
  Reads a single `Record` that is related to this `WorldRecordQuarterly`.
  """
  recordByIdRecord: Record

  """Reads a single `Level` that is related to this `WorldRecordQuarterly`."""
  levelByIdLevel: Level
}

"""A `WorldRecordQuarterly` edge in the connection."""
type WorldRecordQuarterliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WorldRecordQuarterly` at the end of the edge."""
  node: WorldRecordQuarterly
}

"""Methods to use when ordering `WorldRecordQuarterly`."""
enum WorldRecordQuarterliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  QUARTER_ASC
  QUARTER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `WorldRecordQuarterly` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input WorldRecordQuarterlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `quarter` field."""
  quarter: Int
}

"""A connection to a list of `RecordMedia` values."""
type RecordMediasConnection {
  """A list of `RecordMedia` objects."""
  nodes: [RecordMedia]!

  """
  A list of edges which contains the `RecordMedia` and cursor to aid in pagination.
  """
  edges: [RecordMediasEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RecordMedia` you could get from the connection."""
  totalCount: Int!
}

type RecordMedia implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idRecord: Int!
  ghostUrl: String
  screenshotUrl: String
  dateCreated: Datetime!
  dateUpdated: Datetime

  """Reads a single `Record` that is related to this `RecordMedia`."""
  recordByIdRecord: Record
}

"""A `RecordMedia` edge in the connection."""
type RecordMediasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RecordMedia` at the end of the edge."""
  node: RecordMedia
}

"""Methods to use when ordering `RecordMedia`."""
enum RecordMediasOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  GHOST_URL_ASC
  GHOST_URL_DESC
  SCREENSHOT_URL_ASC
  SCREENSHOT_URL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RecordMedia` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RecordMediaCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `ghostUrl` field."""
  ghostUrl: String

  """Checks for equality with the object’s `screenshotUrl` field."""
  screenshotUrl: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""A `PersonalBestGlobal` edge in the connection."""
type PersonalBestGlobalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersonalBestGlobal` at the end of the edge."""
  node: PersonalBestGlobal
}

"""A connection to a list of `UserPoint` values."""
type UserPointsConnection {
  """A list of `UserPoint` objects."""
  nodes: [UserPoint]!

  """
  A list of edges which contains the `UserPoint` and cursor to aid in pagination.
  """
  edges: [UserPointsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserPoint` you could get from the connection."""
  totalCount: Int!
}

type UserPoint implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  idUser: Int!
  points: Int!
  dateCreated: Datetime!
  dateUpdated: Datetime
  rank: Int!
  worldRecords: Int

  """Reads a single `User` that is related to this `UserPoint`."""
  userByIdUser: User
}

"""A `UserPoint` edge in the connection."""
type UserPointsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserPoint` at the end of the edge."""
  node: UserPoint
}

"""Methods to use when ordering `UserPoint`."""
enum UserPointsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  POINTS_ASC
  POINTS_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  RANK_ASC
  RANK_DESC
  WORLD_RECORDS_ASC
  WORLD_RECORDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserPoint` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserPointCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `points` field."""
  points: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `rank` field."""
  rank: Int

  """Checks for equality with the object’s `worldRecords` field."""
  worldRecords: Int
}

"""A `Favorite` edge in the connection."""
type FavoritesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Favorite` at the end of the edge."""
  node: Favorite
}

"""A connection to a list of `Level` values."""
type LevelsConnection {
  """A list of `Level` objects."""
  nodes: [Level]!

  """
  A list of edges which contains the `Level` and cursor to aid in pagination.
  """
  edges: [LevelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Level` you could get from the connection."""
  totalCount: Int!
}

"""A `Level` edge in the connection."""
type LevelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Level` at the end of the edge."""
  node: Level
}

"""Methods to use when ordering `Level`."""
enum LevelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  HASH_ASC
  HASH_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Level` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LevelCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `hash` field."""
  hash: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""A connection to a list of `LevelRequest` values."""
type LevelRequestsConnection {
  """A list of `LevelRequest` objects."""
  nodes: [LevelRequest]!

  """
  A list of edges which contains the `LevelRequest` and cursor to aid in pagination.
  """
  edges: [LevelRequestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LevelRequest` you could get from the connection."""
  totalCount: Int!
}

type LevelRequest implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  workshopId: BigFloat!
  uid: String
  hash: String
  dateCreated: Datetime!
  dateUpdated: Datetime
}

"""A `LevelRequest` edge in the connection."""
type LevelRequestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LevelRequest` at the end of the edge."""
  node: LevelRequest
}

"""Methods to use when ordering `LevelRequest`."""
enum LevelRequestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  WORKSHOP_ID_ASC
  WORKSHOP_ID_DESC
  UID_ASC
  UID_DESC
  HASH_ASC
  HASH_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LevelRequest` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LevelRequestCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `workshopId` field."""
  workshopId: BigFloat

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `hash` field."""
  hash: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `LevelRequest` object types. All fields are combined with a logical ‘and.’
"""
input LevelRequestFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `workshopId` field."""
  workshopId: BigFloatFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter

  """Filter by the object’s `hash` field."""
  hash: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [LevelRequestFilter!]

  """Checks for any expressions in this list."""
  or: [LevelRequestFilter!]

  """Negates the expression."""
  not: LevelRequestFilter
}

"""A connection to a list of `SampledFavorite` values."""
type SampledFavoritesConnection {
  """A list of `SampledFavorite` objects."""
  nodes: [SampledFavorite]!

  """
  A list of edges which contains the `SampledFavorite` and cursor to aid in pagination.
  """
  edges: [SampledFavoritesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledFavorite` you could get from the connection.
  """
  totalCount: Int!
}

type SampledFavorite {
  id: Int
  idUser: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  idLevel: Int
}

"""A `SampledFavorite` edge in the connection."""
type SampledFavoritesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledFavorite` at the end of the edge."""
  node: SampledFavorite
}

"""Methods to use when ordering `SampledFavorite`."""
enum SampledFavoritesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
}

"""
A condition to be used against `SampledFavorite` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledFavoriteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int
}

"""
A filter to be used against `SampledFavorite` object types. All fields are combined with a logical ‘and.’
"""
input SampledFavoriteFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledFavoriteFilter!]

  """Checks for any expressions in this list."""
  or: [SampledFavoriteFilter!]

  """Negates the expression."""
  not: SampledFavoriteFilter
}

"""A connection to a list of `SampledLevel` values."""
type SampledLevelsConnection {
  """A list of `SampledLevel` objects."""
  nodes: [SampledLevel]!

  """
  A list of edges which contains the `SampledLevel` and cursor to aid in pagination.
  """
  edges: [SampledLevelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SampledLevel` you could get from the connection."""
  totalCount: Int!
}

type SampledLevel {
  id: Int
  hash: String
  dateCreated: Datetime
  dateUpdated: Datetime
}

"""A `SampledLevel` edge in the connection."""
type SampledLevelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledLevel` at the end of the edge."""
  node: SampledLevel
}

"""Methods to use when ordering `SampledLevel`."""
enum SampledLevelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  HASH_ASC
  HASH_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
}

"""
A condition to be used against `SampledLevel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledLevelCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `hash` field."""
  hash: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `SampledLevel` object types. All fields are combined with a logical ‘and.’
"""
input SampledLevelFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `hash` field."""
  hash: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SampledLevelFilter!]

  """Checks for any expressions in this list."""
  or: [SampledLevelFilter!]

  """Negates the expression."""
  not: SampledLevelFilter
}

"""A connection to a list of `SampledLevelItem` values."""
type SampledLevelItemsConnection {
  """A list of `SampledLevelItem` objects."""
  nodes: [SampledLevelItem]!

  """
  A list of edges which contains the `SampledLevelItem` and cursor to aid in pagination.
  """
  edges: [SampledLevelItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledLevelItem` you could get from the connection.
  """
  totalCount: Int!
}

type SampledLevelItem {
  id: Int
  idLevel: Int
  workshopId: BigFloat
  authorId: BigFloat
  name: String
  imageUrl: String
  fileAuthor: String
  fileUid: String
  validationTimeAuthor: Float
  validationTimeGold: Float
  validationTimeSilver: Float
  validationTimeBronze: Float
  deleted: Boolean
  createdAt: Datetime
  updatedAt: Datetime
  dateCreated: Datetime
  dateUpdated: Datetime
}

"""A `SampledLevelItem` edge in the connection."""
type SampledLevelItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledLevelItem` at the end of the edge."""
  node: SampledLevelItem
}

"""Methods to use when ordering `SampledLevelItem`."""
enum SampledLevelItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  WORKSHOP_ID_ASC
  WORKSHOP_ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  NAME_ASC
  NAME_DESC
  IMAGE_URL_ASC
  IMAGE_URL_DESC
  FILE_AUTHOR_ASC
  FILE_AUTHOR_DESC
  FILE_UID_ASC
  FILE_UID_DESC
  VALIDATION_TIME_AUTHOR_ASC
  VALIDATION_TIME_AUTHOR_DESC
  VALIDATION_TIME_GOLD_ASC
  VALIDATION_TIME_GOLD_DESC
  VALIDATION_TIME_SILVER_ASC
  VALIDATION_TIME_SILVER_DESC
  VALIDATION_TIME_BRONZE_ASC
  VALIDATION_TIME_BRONZE_DESC
  DELETED_ASC
  DELETED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
}

"""
A condition to be used against `SampledLevelItem` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledLevelItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `workshopId` field."""
  workshopId: BigFloat

  """Checks for equality with the object’s `authorId` field."""
  authorId: BigFloat

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `imageUrl` field."""
  imageUrl: String

  """Checks for equality with the object’s `fileAuthor` field."""
  fileAuthor: String

  """Checks for equality with the object’s `fileUid` field."""
  fileUid: String

  """Checks for equality with the object’s `validationTimeAuthor` field."""
  validationTimeAuthor: Float

  """Checks for equality with the object’s `validationTimeGold` field."""
  validationTimeGold: Float

  """Checks for equality with the object’s `validationTimeSilver` field."""
  validationTimeSilver: Float

  """Checks for equality with the object’s `validationTimeBronze` field."""
  validationTimeBronze: Float

  """Checks for equality with the object’s `deleted` field."""
  deleted: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `SampledLevelItem` object types. All fields are combined with a logical ‘and.’
"""
input SampledLevelItemFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `workshopId` field."""
  workshopId: BigFloatFilter

  """Filter by the object’s `authorId` field."""
  authorId: BigFloatFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `imageUrl` field."""
  imageUrl: StringFilter

  """Filter by the object’s `fileAuthor` field."""
  fileAuthor: StringFilter

  """Filter by the object’s `fileUid` field."""
  fileUid: StringFilter

  """Filter by the object’s `validationTimeAuthor` field."""
  validationTimeAuthor: FloatFilter

  """Filter by the object’s `validationTimeGold` field."""
  validationTimeGold: FloatFilter

  """Filter by the object’s `validationTimeSilver` field."""
  validationTimeSilver: FloatFilter

  """Filter by the object’s `validationTimeBronze` field."""
  validationTimeBronze: FloatFilter

  """Filter by the object’s `deleted` field."""
  deleted: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SampledLevelItemFilter!]

  """Checks for any expressions in this list."""
  or: [SampledLevelItemFilter!]

  """Negates the expression."""
  not: SampledLevelItemFilter
}

"""A connection to a list of `SampledLevelMetadatum` values."""
type SampledLevelMetadataConnection {
  """A list of `SampledLevelMetadatum` objects."""
  nodes: [SampledLevelMetadatum]!

  """
  A list of edges which contains the `SampledLevelMetadatum` and cursor to aid in pagination.
  """
  edges: [SampledLevelMetadataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledLevelMetadatum` you could get from the connection.
  """
  totalCount: Int!
}

type SampledLevelMetadatum {
  id: Int
  idLevel: Int
  amountCheckpoints: Int
  amountFinishes: Int
  amountBlocks: Int
  typeGround: Int
  typeSkybox: Int
  blocks: JSON
  dateCreated: Datetime
  dateUpdated: Datetime
}

"""A `SampledLevelMetadatum` edge in the connection."""
type SampledLevelMetadataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledLevelMetadatum` at the end of the edge."""
  node: SampledLevelMetadatum
}

"""Methods to use when ordering `SampledLevelMetadatum`."""
enum SampledLevelMetadataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  AMOUNT_CHECKPOINTS_ASC
  AMOUNT_CHECKPOINTS_DESC
  AMOUNT_FINISHES_ASC
  AMOUNT_FINISHES_DESC
  AMOUNT_BLOCKS_ASC
  AMOUNT_BLOCKS_DESC
  TYPE_GROUND_ASC
  TYPE_GROUND_DESC
  TYPE_SKYBOX_ASC
  TYPE_SKYBOX_DESC
  BLOCKS_ASC
  BLOCKS_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
}

"""
A condition to be used against `SampledLevelMetadatum` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SampledLevelMetadatumCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `amountCheckpoints` field."""
  amountCheckpoints: Int

  """Checks for equality with the object’s `amountFinishes` field."""
  amountFinishes: Int

  """Checks for equality with the object’s `amountBlocks` field."""
  amountBlocks: Int

  """Checks for equality with the object’s `typeGround` field."""
  typeGround: Int

  """Checks for equality with the object’s `typeSkybox` field."""
  typeSkybox: Int

  """Checks for equality with the object’s `blocks` field."""
  blocks: JSON

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `SampledLevelMetadatum` object types. All fields are combined with a logical ‘and.’
"""
input SampledLevelMetadatumFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `amountCheckpoints` field."""
  amountCheckpoints: IntFilter

  """Filter by the object’s `amountFinishes` field."""
  amountFinishes: IntFilter

  """Filter by the object’s `amountBlocks` field."""
  amountBlocks: IntFilter

  """Filter by the object’s `typeGround` field."""
  typeGround: IntFilter

  """Filter by the object’s `typeSkybox` field."""
  typeSkybox: IntFilter

  """Filter by the object’s `blocks` field."""
  blocks: JSONFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SampledLevelMetadatumFilter!]

  """Checks for any expressions in this list."""
  or: [SampledLevelMetadatumFilter!]

  """Negates the expression."""
  not: SampledLevelMetadatumFilter
}

"""A connection to a list of `SampledLevelPoint` values."""
type SampledLevelPointsConnection {
  """A list of `SampledLevelPoint` objects."""
  nodes: [SampledLevelPoint]!

  """
  A list of edges which contains the `SampledLevelPoint` and cursor to aid in pagination.
  """
  edges: [SampledLevelPointsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledLevelPoint` you could get from the connection.
  """
  totalCount: Int!
}

type SampledLevelPoint {
  id: Int
  points: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
}

"""A `SampledLevelPoint` edge in the connection."""
type SampledLevelPointsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledLevelPoint` at the end of the edge."""
  node: SampledLevelPoint
}

"""Methods to use when ordering `SampledLevelPoint`."""
enum SampledLevelPointsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POINTS_ASC
  POINTS_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
}

"""
A condition to be used against `SampledLevelPoint` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledLevelPointCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `points` field."""
  points: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `SampledLevelPoint` object types. All fields are combined with a logical ‘and.’
"""
input SampledLevelPointFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `points` field."""
  points: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SampledLevelPointFilter!]

  """Checks for any expressions in this list."""
  or: [SampledLevelPointFilter!]

  """Negates the expression."""
  not: SampledLevelPointFilter
}

"""A connection to a list of `SampledLevelRequest` values."""
type SampledLevelRequestsConnection {
  """A list of `SampledLevelRequest` objects."""
  nodes: [SampledLevelRequest]!

  """
  A list of edges which contains the `SampledLevelRequest` and cursor to aid in pagination.
  """
  edges: [SampledLevelRequestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledLevelRequest` you could get from the connection.
  """
  totalCount: Int!
}

type SampledLevelRequest {
  id: Int
  workshopId: BigFloat
  uid: String
  hash: String
  dateCreated: Datetime
  dateUpdated: Datetime
}

"""A `SampledLevelRequest` edge in the connection."""
type SampledLevelRequestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledLevelRequest` at the end of the edge."""
  node: SampledLevelRequest
}

"""Methods to use when ordering `SampledLevelRequest`."""
enum SampledLevelRequestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  WORKSHOP_ID_ASC
  WORKSHOP_ID_DESC
  UID_ASC
  UID_DESC
  HASH_ASC
  HASH_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
}

"""
A condition to be used against `SampledLevelRequest` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SampledLevelRequestCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `workshopId` field."""
  workshopId: BigFloat

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `hash` field."""
  hash: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `SampledLevelRequest` object types. All fields are combined with a logical ‘and.’
"""
input SampledLevelRequestFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `workshopId` field."""
  workshopId: BigFloatFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter

  """Filter by the object’s `hash` field."""
  hash: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SampledLevelRequestFilter!]

  """Checks for any expressions in this list."""
  or: [SampledLevelRequestFilter!]

  """Negates the expression."""
  not: SampledLevelRequestFilter
}

"""A connection to a list of `SampledPersonalBestDaily` values."""
type SampledPersonalBestDailiesConnection {
  """A list of `SampledPersonalBestDaily` objects."""
  nodes: [SampledPersonalBestDaily]!

  """
  A list of edges which contains the `SampledPersonalBestDaily` and cursor to aid in pagination.
  """
  edges: [SampledPersonalBestDailiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledPersonalBestDaily` you could get from the connection.
  """
  totalCount: Int!
}

type SampledPersonalBestDaily {
  id: Int
  idRecord: Int
  idUser: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  day: Int
}

"""A `SampledPersonalBestDaily` edge in the connection."""
type SampledPersonalBestDailiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledPersonalBestDaily` at the end of the edge."""
  node: SampledPersonalBestDaily
}

"""Methods to use when ordering `SampledPersonalBestDaily`."""
enum SampledPersonalBestDailiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  DAY_ASC
  DAY_DESC
}

"""
A condition to be used against `SampledPersonalBestDaily` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledPersonalBestDailyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `day` field."""
  day: Int
}

"""
A filter to be used against `SampledPersonalBestDaily` object types. All fields are combined with a logical ‘and.’
"""
input SampledPersonalBestDailyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `day` field."""
  day: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledPersonalBestDailyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledPersonalBestDailyFilter!]

  """Negates the expression."""
  not: SampledPersonalBestDailyFilter
}

"""A connection to a list of `SampledPersonalBestGlobal` values."""
type SampledPersonalBestGlobalsConnection {
  """A list of `SampledPersonalBestGlobal` objects."""
  nodes: [SampledPersonalBestGlobal]!

  """
  A list of edges which contains the `SampledPersonalBestGlobal` and cursor to aid in pagination.
  """
  edges: [SampledPersonalBestGlobalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledPersonalBestGlobal` you could get from the connection.
  """
  totalCount: Int!
}

type SampledPersonalBestGlobal {
  id: Int
  idRecord: Int
  idUser: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
}

"""A `SampledPersonalBestGlobal` edge in the connection."""
type SampledPersonalBestGlobalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledPersonalBestGlobal` at the end of the edge."""
  node: SampledPersonalBestGlobal
}

"""Methods to use when ordering `SampledPersonalBestGlobal`."""
enum SampledPersonalBestGlobalsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
}

"""
A condition to be used against `SampledPersonalBestGlobal` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledPersonalBestGlobalCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `SampledPersonalBestGlobal` object types. All fields are combined with a logical ‘and.’
"""
input SampledPersonalBestGlobalFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SampledPersonalBestGlobalFilter!]

  """Checks for any expressions in this list."""
  or: [SampledPersonalBestGlobalFilter!]

  """Negates the expression."""
  not: SampledPersonalBestGlobalFilter
}

"""A connection to a list of `SampledPersonalBestMonthly` values."""
type SampledPersonalBestMonthliesConnection {
  """A list of `SampledPersonalBestMonthly` objects."""
  nodes: [SampledPersonalBestMonthly]!

  """
  A list of edges which contains the `SampledPersonalBestMonthly` and cursor to aid in pagination.
  """
  edges: [SampledPersonalBestMonthliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledPersonalBestMonthly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledPersonalBestMonthly {
  id: Int
  idRecord: Int
  idUser: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  month: Int
}

"""A `SampledPersonalBestMonthly` edge in the connection."""
type SampledPersonalBestMonthliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledPersonalBestMonthly` at the end of the edge."""
  node: SampledPersonalBestMonthly
}

"""Methods to use when ordering `SampledPersonalBestMonthly`."""
enum SampledPersonalBestMonthliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
}

"""
A condition to be used against `SampledPersonalBestMonthly` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledPersonalBestMonthlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `month` field."""
  month: Int
}

"""
A filter to be used against `SampledPersonalBestMonthly` object types. All fields are combined with a logical ‘and.’
"""
input SampledPersonalBestMonthlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `month` field."""
  month: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledPersonalBestMonthlyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledPersonalBestMonthlyFilter!]

  """Negates the expression."""
  not: SampledPersonalBestMonthlyFilter
}

"""A connection to a list of `SampledPersonalBestQuarterly` values."""
type SampledPersonalBestQuarterliesConnection {
  """A list of `SampledPersonalBestQuarterly` objects."""
  nodes: [SampledPersonalBestQuarterly]!

  """
  A list of edges which contains the `SampledPersonalBestQuarterly` and cursor to aid in pagination.
  """
  edges: [SampledPersonalBestQuarterliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledPersonalBestQuarterly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledPersonalBestQuarterly {
  id: Int
  idRecord: Int
  idUser: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  quarter: Int
}

"""A `SampledPersonalBestQuarterly` edge in the connection."""
type SampledPersonalBestQuarterliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledPersonalBestQuarterly` at the end of the edge."""
  node: SampledPersonalBestQuarterly
}

"""Methods to use when ordering `SampledPersonalBestQuarterly`."""
enum SampledPersonalBestQuarterliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  QUARTER_ASC
  QUARTER_DESC
}

"""
A condition to be used against `SampledPersonalBestQuarterly` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledPersonalBestQuarterlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `quarter` field."""
  quarter: Int
}

"""
A filter to be used against `SampledPersonalBestQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input SampledPersonalBestQuarterlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `quarter` field."""
  quarter: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledPersonalBestQuarterlyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledPersonalBestQuarterlyFilter!]

  """Negates the expression."""
  not: SampledPersonalBestQuarterlyFilter
}

"""A connection to a list of `SampledPersonalBestWeekly` values."""
type SampledPersonalBestWeekliesConnection {
  """A list of `SampledPersonalBestWeekly` objects."""
  nodes: [SampledPersonalBestWeekly]!

  """
  A list of edges which contains the `SampledPersonalBestWeekly` and cursor to aid in pagination.
  """
  edges: [SampledPersonalBestWeekliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledPersonalBestWeekly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledPersonalBestWeekly {
  id: Int
  idRecord: Int
  idUser: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  week: Int
}

"""A `SampledPersonalBestWeekly` edge in the connection."""
type SampledPersonalBestWeekliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledPersonalBestWeekly` at the end of the edge."""
  node: SampledPersonalBestWeekly
}

"""Methods to use when ordering `SampledPersonalBestWeekly`."""
enum SampledPersonalBestWeekliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  WEEK_ASC
  WEEK_DESC
}

"""
A condition to be used against `SampledPersonalBestWeekly` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledPersonalBestWeeklyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `week` field."""
  week: Int
}

"""
A filter to be used against `SampledPersonalBestWeekly` object types. All fields are combined with a logical ‘and.’
"""
input SampledPersonalBestWeeklyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `week` field."""
  week: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledPersonalBestWeeklyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledPersonalBestWeeklyFilter!]

  """Negates the expression."""
  not: SampledPersonalBestWeeklyFilter
}

"""A connection to a list of `SampledPersonalBestYearly` values."""
type SampledPersonalBestYearliesConnection {
  """A list of `SampledPersonalBestYearly` objects."""
  nodes: [SampledPersonalBestYearly]!

  """
  A list of edges which contains the `SampledPersonalBestYearly` and cursor to aid in pagination.
  """
  edges: [SampledPersonalBestYearliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledPersonalBestYearly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledPersonalBestYearly {
  id: Int
  idRecord: Int
  idUser: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
}

"""A `SampledPersonalBestYearly` edge in the connection."""
type SampledPersonalBestYearliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledPersonalBestYearly` at the end of the edge."""
  node: SampledPersonalBestYearly
}

"""Methods to use when ordering `SampledPersonalBestYearly`."""
enum SampledPersonalBestYearliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
}

"""
A condition to be used against `SampledPersonalBestYearly` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledPersonalBestYearlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""
A filter to be used against `SampledPersonalBestYearly` object types. All fields are combined with a logical ‘and.’
"""
input SampledPersonalBestYearlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledPersonalBestYearlyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledPersonalBestYearlyFilter!]

  """Negates the expression."""
  not: SampledPersonalBestYearlyFilter
}

"""A connection to a list of `SampledRecord` values."""
type SampledRecordsConnection {
  """A list of `SampledRecord` objects."""
  nodes: [SampledRecord]!

  """
  A list of edges which contains the `SampledRecord` and cursor to aid in pagination.
  """
  edges: [SampledRecordsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SampledRecord` you could get from the connection."""
  totalCount: Int!
}

type SampledRecord {
  id: Int
  idUser: Int
  time: Float
  gameVersion: String
  isValid: Boolean
  idLevel: Int
  modVersion: String
  dateCreated: Datetime
  dateUpdated: Datetime
  splits: [Float]
  speeds: [Float]
}

"""A `SampledRecord` edge in the connection."""
type SampledRecordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledRecord` at the end of the edge."""
  node: SampledRecord
}

"""Methods to use when ordering `SampledRecord`."""
enum SampledRecordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  TIME_ASC
  TIME_DESC
  GAME_VERSION_ASC
  GAME_VERSION_DESC
  IS_VALID_ASC
  IS_VALID_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  MOD_VERSION_ASC
  MOD_VERSION_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  SPLITS_ASC
  SPLITS_DESC
  SPEEDS_ASC
  SPEEDS_DESC
}

"""
A condition to be used against `SampledRecord` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledRecordCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `time` field."""
  time: Float

  """Checks for equality with the object’s `gameVersion` field."""
  gameVersion: String

  """Checks for equality with the object’s `isValid` field."""
  isValid: Boolean

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `modVersion` field."""
  modVersion: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `splits` field."""
  splits: [Float]

  """Checks for equality with the object’s `speeds` field."""
  speeds: [Float]
}

"""
A filter to be used against `SampledRecord` object types. All fields are combined with a logical ‘and.’
"""
input SampledRecordFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `time` field."""
  time: FloatFilter

  """Filter by the object’s `gameVersion` field."""
  gameVersion: StringFilter

  """Filter by the object’s `isValid` field."""
  isValid: BooleanFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `modVersion` field."""
  modVersion: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `splits` field."""
  splits: FloatListFilter

  """Filter by the object’s `speeds` field."""
  speeds: FloatListFilter

  """Checks for all expressions in this list."""
  and: [SampledRecordFilter!]

  """Checks for any expressions in this list."""
  or: [SampledRecordFilter!]

  """Negates the expression."""
  not: SampledRecordFilter
}

"""A connection to a list of `SampledRecordMedia` values."""
type SampledRecordMediasConnection {
  """A list of `SampledRecordMedia` objects."""
  nodes: [SampledRecordMedia]!

  """
  A list of edges which contains the `SampledRecordMedia` and cursor to aid in pagination.
  """
  edges: [SampledRecordMediasEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledRecordMedia` you could get from the connection.
  """
  totalCount: Int!
}

type SampledRecordMedia {
  id: Int
  idRecord: Int
  ghostUrl: String
  screenshotUrl: String
  dateCreated: Datetime
  dateUpdated: Datetime
}

"""A `SampledRecordMedia` edge in the connection."""
type SampledRecordMediasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledRecordMedia` at the end of the edge."""
  node: SampledRecordMedia
}

"""Methods to use when ordering `SampledRecordMedia`."""
enum SampledRecordMediasOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  GHOST_URL_ASC
  GHOST_URL_DESC
  SCREENSHOT_URL_ASC
  SCREENSHOT_URL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
}

"""
A condition to be used against `SampledRecordMedia` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledRecordMediaCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `ghostUrl` field."""
  ghostUrl: String

  """Checks for equality with the object’s `screenshotUrl` field."""
  screenshotUrl: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `SampledRecordMedia` object types. All fields are combined with a logical ‘and.’
"""
input SampledRecordMediaFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `ghostUrl` field."""
  ghostUrl: StringFilter

  """Filter by the object’s `screenshotUrl` field."""
  screenshotUrl: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SampledRecordMediaFilter!]

  """Checks for any expressions in this list."""
  or: [SampledRecordMediaFilter!]

  """Negates the expression."""
  not: SampledRecordMediaFilter
}

"""A connection to a list of `SampledStatsDaily` values."""
type SampledStatsDailiesConnection {
  """A list of `SampledStatsDaily` objects."""
  nodes: [SampledStatsDaily]!

  """
  A list of edges which contains the `SampledStatsDaily` and cursor to aid in pagination.
  """
  edges: [SampledStatsDailiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledStatsDaily` you could get from the connection.
  """
  totalCount: Int!
}

type SampledStatsDaily {
  id: Int
  idUser: Int
  idLevel: Int
  key: String
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  day: Int
  value: BigFloat
}

"""A `SampledStatsDaily` edge in the connection."""
type SampledStatsDailiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledStatsDaily` at the end of the edge."""
  node: SampledStatsDaily
}

"""Methods to use when ordering `SampledStatsDaily`."""
enum SampledStatsDailiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  DAY_ASC
  DAY_DESC
  VALUE_ASC
  VALUE_DESC
}

"""
A condition to be used against `SampledStatsDaily` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledStatsDailyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `day` field."""
  day: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""
A filter to be used against `SampledStatsDaily` object types. All fields are combined with a logical ‘and.’
"""
input SampledStatsDailyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `day` field."""
  day: IntFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [SampledStatsDailyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledStatsDailyFilter!]

  """Negates the expression."""
  not: SampledStatsDailyFilter
}

"""A connection to a list of `SampledStatsGlobal` values."""
type SampledStatsGlobalsConnection {
  """A list of `SampledStatsGlobal` objects."""
  nodes: [SampledStatsGlobal]!

  """
  A list of edges which contains the `SampledStatsGlobal` and cursor to aid in pagination.
  """
  edges: [SampledStatsGlobalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledStatsGlobal` you could get from the connection.
  """
  totalCount: Int!
}

type SampledStatsGlobal {
  id: Int
  idUser: Int
  idLevel: Int
  key: String
  dateCreated: Datetime
  dateUpdated: Datetime
  value: BigFloat
}

"""A `SampledStatsGlobal` edge in the connection."""
type SampledStatsGlobalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledStatsGlobal` at the end of the edge."""
  node: SampledStatsGlobal
}

"""Methods to use when ordering `SampledStatsGlobal`."""
enum SampledStatsGlobalsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  VALUE_ASC
  VALUE_DESC
}

"""
A condition to be used against `SampledStatsGlobal` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledStatsGlobalCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""
A filter to be used against `SampledStatsGlobal` object types. All fields are combined with a logical ‘and.’
"""
input SampledStatsGlobalFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [SampledStatsGlobalFilter!]

  """Checks for any expressions in this list."""
  or: [SampledStatsGlobalFilter!]

  """Negates the expression."""
  not: SampledStatsGlobalFilter
}

"""A connection to a list of `SampledStatsMonthly` values."""
type SampledStatsMonthliesConnection {
  """A list of `SampledStatsMonthly` objects."""
  nodes: [SampledStatsMonthly]!

  """
  A list of edges which contains the `SampledStatsMonthly` and cursor to aid in pagination.
  """
  edges: [SampledStatsMonthliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledStatsMonthly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledStatsMonthly {
  id: Int
  idUser: Int
  idLevel: Int
  key: String
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  month: Int
  value: BigFloat
}

"""A `SampledStatsMonthly` edge in the connection."""
type SampledStatsMonthliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledStatsMonthly` at the end of the edge."""
  node: SampledStatsMonthly
}

"""Methods to use when ordering `SampledStatsMonthly`."""
enum SampledStatsMonthliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
  VALUE_ASC
  VALUE_DESC
}

"""
A condition to be used against `SampledStatsMonthly` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SampledStatsMonthlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `month` field."""
  month: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""
A filter to be used against `SampledStatsMonthly` object types. All fields are combined with a logical ‘and.’
"""
input SampledStatsMonthlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `month` field."""
  month: IntFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [SampledStatsMonthlyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledStatsMonthlyFilter!]

  """Negates the expression."""
  not: SampledStatsMonthlyFilter
}

"""A connection to a list of `SampledStatsQuarterly` values."""
type SampledStatsQuarterliesConnection {
  """A list of `SampledStatsQuarterly` objects."""
  nodes: [SampledStatsQuarterly]!

  """
  A list of edges which contains the `SampledStatsQuarterly` and cursor to aid in pagination.
  """
  edges: [SampledStatsQuarterliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledStatsQuarterly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledStatsQuarterly {
  id: Int
  idUser: Int
  idLevel: Int
  key: String
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  quarter: Int
  value: BigFloat
}

"""A `SampledStatsQuarterly` edge in the connection."""
type SampledStatsQuarterliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledStatsQuarterly` at the end of the edge."""
  node: SampledStatsQuarterly
}

"""Methods to use when ordering `SampledStatsQuarterly`."""
enum SampledStatsQuarterliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  QUARTER_ASC
  QUARTER_DESC
  VALUE_ASC
  VALUE_DESC
}

"""
A condition to be used against `SampledStatsQuarterly` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SampledStatsQuarterlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `quarter` field."""
  quarter: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""
A filter to be used against `SampledStatsQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input SampledStatsQuarterlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `quarter` field."""
  quarter: IntFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [SampledStatsQuarterlyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledStatsQuarterlyFilter!]

  """Negates the expression."""
  not: SampledStatsQuarterlyFilter
}

"""A connection to a list of `SampledStatsWeekly` values."""
type SampledStatsWeekliesConnection {
  """A list of `SampledStatsWeekly` objects."""
  nodes: [SampledStatsWeekly]!

  """
  A list of edges which contains the `SampledStatsWeekly` and cursor to aid in pagination.
  """
  edges: [SampledStatsWeekliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledStatsWeekly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledStatsWeekly {
  id: Int
  idUser: Int
  idLevel: Int
  key: String
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  week: Int
  value: BigFloat
}

"""A `SampledStatsWeekly` edge in the connection."""
type SampledStatsWeekliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledStatsWeekly` at the end of the edge."""
  node: SampledStatsWeekly
}

"""Methods to use when ordering `SampledStatsWeekly`."""
enum SampledStatsWeekliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  WEEK_ASC
  WEEK_DESC
  VALUE_ASC
  VALUE_DESC
}

"""
A condition to be used against `SampledStatsWeekly` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledStatsWeeklyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `week` field."""
  week: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""
A filter to be used against `SampledStatsWeekly` object types. All fields are combined with a logical ‘and.’
"""
input SampledStatsWeeklyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `week` field."""
  week: IntFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [SampledStatsWeeklyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledStatsWeeklyFilter!]

  """Negates the expression."""
  not: SampledStatsWeeklyFilter
}

"""A connection to a list of `SampledStatsYearly` values."""
type SampledStatsYearliesConnection {
  """A list of `SampledStatsYearly` objects."""
  nodes: [SampledStatsYearly]!

  """
  A list of edges which contains the `SampledStatsYearly` and cursor to aid in pagination.
  """
  edges: [SampledStatsYearliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledStatsYearly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledStatsYearly {
  id: Int
  idUser: Int
  idLevel: Int
  key: String
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  value: BigFloat
}

"""A `SampledStatsYearly` edge in the connection."""
type SampledStatsYearliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledStatsYearly` at the end of the edge."""
  node: SampledStatsYearly
}

"""Methods to use when ordering `SampledStatsYearly`."""
enum SampledStatsYearliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  KEY_ASC
  KEY_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  VALUE_ASC
  VALUE_DESC
}

"""
A condition to be used against `SampledStatsYearly` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledStatsYearlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat
}

"""
A filter to be used against `SampledStatsYearly` object types. All fields are combined with a logical ‘and.’
"""
input SampledStatsYearlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `value` field."""
  value: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [SampledStatsYearlyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledStatsYearlyFilter!]

  """Negates the expression."""
  not: SampledStatsYearlyFilter
}

"""A connection to a list of `SampledUpvote` values."""
type SampledUpvotesConnection {
  """A list of `SampledUpvote` objects."""
  nodes: [SampledUpvote]!

  """
  A list of edges which contains the `SampledUpvote` and cursor to aid in pagination.
  """
  edges: [SampledUpvotesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SampledUpvote` you could get from the connection."""
  totalCount: Int!
}

type SampledUpvote {
  id: Int
  idUser: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
}

"""A `SampledUpvote` edge in the connection."""
type SampledUpvotesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledUpvote` at the end of the edge."""
  node: SampledUpvote
}

"""Methods to use when ordering `SampledUpvote`."""
enum SampledUpvotesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
}

"""
A condition to be used against `SampledUpvote` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledUpvoteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `SampledUpvote` object types. All fields are combined with a logical ‘and.’
"""
input SampledUpvoteFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SampledUpvoteFilter!]

  """Checks for any expressions in this list."""
  or: [SampledUpvoteFilter!]

  """Negates the expression."""
  not: SampledUpvoteFilter
}

"""A connection to a list of `SampledUser` values."""
type SampledUsersConnection {
  """A list of `SampledUser` objects."""
  nodes: [SampledUser]!

  """
  A list of edges which contains the `SampledUser` and cursor to aid in pagination.
  """
  edges: [SampledUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SampledUser` you could get from the connection."""
  totalCount: Int!
}

type SampledUser {
  id: Int
  steamName: String
  banned: Boolean
  dateCreated: Datetime
  dateUpdated: Datetime
  steamId: BigFloat
  discordId: BigFloat
}

"""A `SampledUser` edge in the connection."""
type SampledUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledUser` at the end of the edge."""
  node: SampledUser
}

"""Methods to use when ordering `SampledUser`."""
enum SampledUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  STEAM_NAME_ASC
  STEAM_NAME_DESC
  BANNED_ASC
  BANNED_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  STEAM_ID_ASC
  STEAM_ID_DESC
  DISCORD_ID_ASC
  DISCORD_ID_DESC
}

"""
A condition to be used against `SampledUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SampledUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `steamName` field."""
  steamName: String

  """Checks for equality with the object’s `banned` field."""
  banned: Boolean

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `steamId` field."""
  steamId: BigFloat

  """Checks for equality with the object’s `discordId` field."""
  discordId: BigFloat
}

"""
A filter to be used against `SampledUser` object types. All fields are combined with a logical ‘and.’
"""
input SampledUserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `steamName` field."""
  steamName: StringFilter

  """Filter by the object’s `banned` field."""
  banned: BooleanFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `steamId` field."""
  steamId: BigFloatFilter

  """Filter by the object’s `discordId` field."""
  discordId: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [SampledUserFilter!]

  """Checks for any expressions in this list."""
  or: [SampledUserFilter!]

  """Negates the expression."""
  not: SampledUserFilter
}

"""A connection to a list of `SampledUserPoint` values."""
type SampledUserPointsConnection {
  """A list of `SampledUserPoint` objects."""
  nodes: [SampledUserPoint]!

  """
  A list of edges which contains the `SampledUserPoint` and cursor to aid in pagination.
  """
  edges: [SampledUserPointsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledUserPoint` you could get from the connection.
  """
  totalCount: Int!
}

type SampledUserPoint {
  id: Int
  idUser: Int
  points: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  rank: Int
  worldRecords: Int
}

"""A `SampledUserPoint` edge in the connection."""
type SampledUserPointsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledUserPoint` at the end of the edge."""
  node: SampledUserPoint
}

"""Methods to use when ordering `SampledUserPoint`."""
enum SampledUserPointsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_USER_ASC
  ID_USER_DESC
  POINTS_ASC
  POINTS_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  RANK_ASC
  RANK_DESC
  WORLD_RECORDS_ASC
  WORLD_RECORDS_DESC
}

"""
A condition to be used against `SampledUserPoint` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledUserPointCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idUser` field."""
  idUser: Int

  """Checks for equality with the object’s `points` field."""
  points: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `rank` field."""
  rank: Int

  """Checks for equality with the object’s `worldRecords` field."""
  worldRecords: Int
}

"""
A filter to be used against `SampledUserPoint` object types. All fields are combined with a logical ‘and.’
"""
input SampledUserPointFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idUser` field."""
  idUser: IntFilter

  """Filter by the object’s `points` field."""
  points: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `rank` field."""
  rank: IntFilter

  """Filter by the object’s `worldRecords` field."""
  worldRecords: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledUserPointFilter!]

  """Checks for any expressions in this list."""
  or: [SampledUserPointFilter!]

  """Negates the expression."""
  not: SampledUserPointFilter
}

"""A connection to a list of `SampledVersion` values."""
type SampledVersionsConnection {
  """A list of `SampledVersion` objects."""
  nodes: [SampledVersion]!

  """
  A list of edges which contains the `SampledVersion` and cursor to aid in pagination.
  """
  edges: [SampledVersionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SampledVersion` you could get from the connection."""
  totalCount: Int!
}

type SampledVersion {
  id: Int
  minimum: String
  latest: String
  dateCreated: Datetime
  dateUpdated: Datetime
}

"""A `SampledVersion` edge in the connection."""
type SampledVersionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledVersion` at the end of the edge."""
  node: SampledVersion
}

"""Methods to use when ordering `SampledVersion`."""
enum SampledVersionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MINIMUM_ASC
  MINIMUM_DESC
  LATEST_ASC
  LATEST_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
}

"""
A condition to be used against `SampledVersion` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SampledVersionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `minimum` field."""
  minimum: String

  """Checks for equality with the object’s `latest` field."""
  latest: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `SampledVersion` object types. All fields are combined with a logical ‘and.’
"""
input SampledVersionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `minimum` field."""
  minimum: StringFilter

  """Filter by the object’s `latest` field."""
  latest: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SampledVersionFilter!]

  """Checks for any expressions in this list."""
  or: [SampledVersionFilter!]

  """Negates the expression."""
  not: SampledVersionFilter
}

"""A connection to a list of `SampledWorldRecordDaily` values."""
type SampledWorldRecordDailiesConnection {
  """A list of `SampledWorldRecordDaily` objects."""
  nodes: [SampledWorldRecordDaily]!

  """
  A list of edges which contains the `SampledWorldRecordDaily` and cursor to aid in pagination.
  """
  edges: [SampledWorldRecordDailiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledWorldRecordDaily` you could get from the connection.
  """
  totalCount: Int!
}

type SampledWorldRecordDaily {
  id: Int
  idRecord: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  day: Int
}

"""A `SampledWorldRecordDaily` edge in the connection."""
type SampledWorldRecordDailiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledWorldRecordDaily` at the end of the edge."""
  node: SampledWorldRecordDaily
}

"""Methods to use when ordering `SampledWorldRecordDaily`."""
enum SampledWorldRecordDailiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  DAY_ASC
  DAY_DESC
}

"""
A condition to be used against `SampledWorldRecordDaily` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledWorldRecordDailyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `day` field."""
  day: Int
}

"""
A filter to be used against `SampledWorldRecordDaily` object types. All fields are combined with a logical ‘and.’
"""
input SampledWorldRecordDailyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `day` field."""
  day: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledWorldRecordDailyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledWorldRecordDailyFilter!]

  """Negates the expression."""
  not: SampledWorldRecordDailyFilter
}

"""A connection to a list of `SampledWorldRecordGlobal` values."""
type SampledWorldRecordGlobalsConnection {
  """A list of `SampledWorldRecordGlobal` objects."""
  nodes: [SampledWorldRecordGlobal]!

  """
  A list of edges which contains the `SampledWorldRecordGlobal` and cursor to aid in pagination.
  """
  edges: [SampledWorldRecordGlobalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledWorldRecordGlobal` you could get from the connection.
  """
  totalCount: Int!
}

type SampledWorldRecordGlobal {
  id: Int
  idRecord: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
}

"""A `SampledWorldRecordGlobal` edge in the connection."""
type SampledWorldRecordGlobalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledWorldRecordGlobal` at the end of the edge."""
  node: SampledWorldRecordGlobal
}

"""Methods to use when ordering `SampledWorldRecordGlobal`."""
enum SampledWorldRecordGlobalsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
}

"""
A condition to be used against `SampledWorldRecordGlobal` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledWorldRecordGlobalCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `SampledWorldRecordGlobal` object types. All fields are combined with a logical ‘and.’
"""
input SampledWorldRecordGlobalFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SampledWorldRecordGlobalFilter!]

  """Checks for any expressions in this list."""
  or: [SampledWorldRecordGlobalFilter!]

  """Negates the expression."""
  not: SampledWorldRecordGlobalFilter
}

"""A connection to a list of `SampledWorldRecordMonthly` values."""
type SampledWorldRecordMonthliesConnection {
  """A list of `SampledWorldRecordMonthly` objects."""
  nodes: [SampledWorldRecordMonthly]!

  """
  A list of edges which contains the `SampledWorldRecordMonthly` and cursor to aid in pagination.
  """
  edges: [SampledWorldRecordMonthliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledWorldRecordMonthly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledWorldRecordMonthly {
  id: Int
  idRecord: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  month: Int
}

"""A `SampledWorldRecordMonthly` edge in the connection."""
type SampledWorldRecordMonthliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledWorldRecordMonthly` at the end of the edge."""
  node: SampledWorldRecordMonthly
}

"""Methods to use when ordering `SampledWorldRecordMonthly`."""
enum SampledWorldRecordMonthliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  MONTH_ASC
  MONTH_DESC
}

"""
A condition to be used against `SampledWorldRecordMonthly` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledWorldRecordMonthlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `month` field."""
  month: Int
}

"""
A filter to be used against `SampledWorldRecordMonthly` object types. All fields are combined with a logical ‘and.’
"""
input SampledWorldRecordMonthlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `month` field."""
  month: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledWorldRecordMonthlyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledWorldRecordMonthlyFilter!]

  """Negates the expression."""
  not: SampledWorldRecordMonthlyFilter
}

"""A connection to a list of `SampledWorldRecordQuarterly` values."""
type SampledWorldRecordQuarterliesConnection {
  """A list of `SampledWorldRecordQuarterly` objects."""
  nodes: [SampledWorldRecordQuarterly]!

  """
  A list of edges which contains the `SampledWorldRecordQuarterly` and cursor to aid in pagination.
  """
  edges: [SampledWorldRecordQuarterliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledWorldRecordQuarterly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledWorldRecordQuarterly {
  id: Int
  idRecord: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  quarter: Int
}

"""A `SampledWorldRecordQuarterly` edge in the connection."""
type SampledWorldRecordQuarterliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledWorldRecordQuarterly` at the end of the edge."""
  node: SampledWorldRecordQuarterly
}

"""Methods to use when ordering `SampledWorldRecordQuarterly`."""
enum SampledWorldRecordQuarterliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  QUARTER_ASC
  QUARTER_DESC
}

"""
A condition to be used against `SampledWorldRecordQuarterly` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledWorldRecordQuarterlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `quarter` field."""
  quarter: Int
}

"""
A filter to be used against `SampledWorldRecordQuarterly` object types. All fields are combined with a logical ‘and.’
"""
input SampledWorldRecordQuarterlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `quarter` field."""
  quarter: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledWorldRecordQuarterlyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledWorldRecordQuarterlyFilter!]

  """Negates the expression."""
  not: SampledWorldRecordQuarterlyFilter
}

"""A connection to a list of `SampledWorldRecordWeekly` values."""
type SampledWorldRecordWeekliesConnection {
  """A list of `SampledWorldRecordWeekly` objects."""
  nodes: [SampledWorldRecordWeekly]!

  """
  A list of edges which contains the `SampledWorldRecordWeekly` and cursor to aid in pagination.
  """
  edges: [SampledWorldRecordWeekliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledWorldRecordWeekly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledWorldRecordWeekly {
  id: Int
  idRecord: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
  week: Int
}

"""A `SampledWorldRecordWeekly` edge in the connection."""
type SampledWorldRecordWeekliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledWorldRecordWeekly` at the end of the edge."""
  node: SampledWorldRecordWeekly
}

"""Methods to use when ordering `SampledWorldRecordWeekly`."""
enum SampledWorldRecordWeekliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
  WEEK_ASC
  WEEK_DESC
}

"""
A condition to be used against `SampledWorldRecordWeekly` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledWorldRecordWeeklyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `week` field."""
  week: Int
}

"""
A filter to be used against `SampledWorldRecordWeekly` object types. All fields are combined with a logical ‘and.’
"""
input SampledWorldRecordWeeklyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `week` field."""
  week: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledWorldRecordWeeklyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledWorldRecordWeeklyFilter!]

  """Negates the expression."""
  not: SampledWorldRecordWeeklyFilter
}

"""A connection to a list of `SampledWorldRecordYearly` values."""
type SampledWorldRecordYearliesConnection {
  """A list of `SampledWorldRecordYearly` objects."""
  nodes: [SampledWorldRecordYearly]!

  """
  A list of edges which contains the `SampledWorldRecordYearly` and cursor to aid in pagination.
  """
  edges: [SampledWorldRecordYearliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SampledWorldRecordYearly` you could get from the connection.
  """
  totalCount: Int!
}

type SampledWorldRecordYearly {
  id: Int
  idRecord: Int
  idLevel: Int
  dateCreated: Datetime
  dateUpdated: Datetime
  year: Int
}

"""A `SampledWorldRecordYearly` edge in the connection."""
type SampledWorldRecordYearliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SampledWorldRecordYearly` at the end of the edge."""
  node: SampledWorldRecordYearly
}

"""Methods to use when ordering `SampledWorldRecordYearly`."""
enum SampledWorldRecordYearliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ID_RECORD_ASC
  ID_RECORD_DESC
  ID_LEVEL_ASC
  ID_LEVEL_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  YEAR_ASC
  YEAR_DESC
}

"""
A condition to be used against `SampledWorldRecordYearly` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SampledWorldRecordYearlyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `idRecord` field."""
  idRecord: Int

  """Checks for equality with the object’s `idLevel` field."""
  idLevel: Int

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""
A filter to be used against `SampledWorldRecordYearly` object types. All fields are combined with a logical ‘and.’
"""
input SampledWorldRecordYearlyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idRecord` field."""
  idRecord: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Checks for all expressions in this list."""
  and: [SampledWorldRecordYearlyFilter!]

  """Checks for any expressions in this list."""
  or: [SampledWorldRecordYearlyFilter!]

  """Negates the expression."""
  not: SampledWorldRecordYearlyFilter
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  STEAM_NAME_ASC
  STEAM_NAME_DESC
  BANNED_ASC
  BANNED_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  STEAM_ID_ASC
  STEAM_ID_DESC
  DISCORD_ID_ASC
  DISCORD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `steamName` field."""
  steamName: String

  """Checks for equality with the object’s `banned` field."""
  banned: Boolean

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `steamId` field."""
  steamId: BigFloat

  """Checks for equality with the object’s `discordId` field."""
  discordId: BigFloat
}

"""A connection to a list of `Version` values."""
type VersionsConnection {
  """A list of `Version` objects."""
  nodes: [Version]!

  """
  A list of edges which contains the `Version` and cursor to aid in pagination.
  """
  edges: [VersionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Version` you could get from the connection."""
  totalCount: Int!
}

type Version implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  minimum: String
  latest: String
  dateCreated: Datetime!
  dateUpdated: Datetime
}

"""A `Version` edge in the connection."""
type VersionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Version` at the end of the edge."""
  node: Version
}

"""Methods to use when ordering `Version`."""
enum VersionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MINIMUM_ASC
  MINIMUM_DESC
  LATEST_ASC
  LATEST_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Version` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input VersionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `minimum` field."""
  minimum: String

  """Checks for equality with the object’s `latest` field."""
  latest: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime
}

"""
A filter to be used against `Version` object types. All fields are combined with a logical ‘and.’
"""
input VersionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `minimum` field."""
  minimum: StringFilter

  """Filter by the object’s `latest` field."""
  latest: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [VersionFilter!]

  """Checks for any expressions in this list."""
  or: [VersionFilter!]

  """Negates the expression."""
  not: VersionFilter
}

"""A connection to a list of `ZRtmRecord` values."""
type ZRtmConnection {
  """A list of `ZRtmRecord` objects."""
  nodes: [ZRtmRecord]!

  """
  A list of edges which contains the `ZRtmRecord` and cursor to aid in pagination.
  """
  edges: [ZRtmEdge!]!

  """The count of *all* `ZRtmRecord` you could get from the connection."""
  totalCount: Int!
}

"""The return type of our `zRtm` query."""
type ZRtmRecord {
  id: Int
  idLevel: Int
  workshopId: BigFloat
  authorId: BigFloat
  name: String
  imageUrl: String
  fileAuthor: String
  fileUid: String
  validationTimeAuthor: Float
  validationTimeGold: Float
  validationTimeSilver: Float
  validationTimeBronze: Float
  deleted: Boolean
  createdAt: Datetime
  updatedAt: Datetime
  dateCreated: Datetime
  dateUpdated: Datetime
  amountCheckpoints: Int
  numRecords: BigInt
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""A `ZRtmRecord` edge in the connection."""
type ZRtmEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ZRtmRecord` at the end of the edge."""
  node: ZRtmRecord
}

"""
A filter to be used against `ZRtmRecord` object types. All fields are combined with a logical ‘and.’
"""
input ZRtmRecordFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `idLevel` field."""
  idLevel: IntFilter

  """Filter by the object’s `workshopId` field."""
  workshopId: BigFloatFilter

  """Filter by the object’s `authorId` field."""
  authorId: BigFloatFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `imageUrl` field."""
  imageUrl: StringFilter

  """Filter by the object’s `fileAuthor` field."""
  fileAuthor: StringFilter

  """Filter by the object’s `fileUid` field."""
  fileUid: StringFilter

  """Filter by the object’s `validationTimeAuthor` field."""
  validationTimeAuthor: FloatFilter

  """Filter by the object’s `validationTimeGold` field."""
  validationTimeGold: FloatFilter

  """Filter by the object’s `validationTimeSilver` field."""
  validationTimeSilver: FloatFilter

  """Filter by the object’s `validationTimeBronze` field."""
  validationTimeBronze: FloatFilter

  """Filter by the object’s `deleted` field."""
  deleted: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateUpdated` field."""
  dateUpdated: DatetimeFilter

  """Filter by the object’s `amountCheckpoints` field."""
  amountCheckpoints: IntFilter

  """Filter by the object’s `numRecords` field."""
  numRecords: BigIntFilter

  """Checks for all expressions in this list."""
  and: [ZRtmRecordFilter!]

  """Checks for any expressions in this list."""
  or: [ZRtmRecordFilter!]

  """Negates the expression."""
  not: ZRtmRecordFilter
}

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  updateWorldRecordGlobal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWorldRecordGlobalInput!
  ): UpdateWorldRecordGlobalPayload
}

"""The output of our `updateWorldRecordGlobal` mutation."""
type UpdateWorldRecordGlobalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateWorldRecordGlobal` mutation."""
input UpdateWorldRecordGlobalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}