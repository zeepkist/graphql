"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Level`."""
  allLevels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Level`."""
    orderBy: [LevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevelCondition
  ): LevelsConnection

  """Reads and enables pagination through a set of `Metadatum`."""
  allMetadata(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Metadatum`."""
    orderBy: [MetadataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MetadatumCondition
  ): MetadataConnection
  levelById(id: Int!): Level
  metadatumByHash(hash: String!): Metadatum

  """Reads a single `Level` using its globally unique `ID`."""
  level(
    """The globally unique `ID` to be used in selecting a single `Level`."""
    nodeId: ID!
  ): Level

  """Reads a single `Metadatum` using its globally unique `ID`."""
  metadatum(
    """The globally unique `ID` to be used in selecting a single `Metadatum`."""
    nodeId: ID!
  ): Metadatum
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Level` values."""
type LevelsConnection {
  """A list of `Level` objects."""
  nodes: [Level]!

  """
  A list of edges which contains the `Level` and cursor to aid in pagination.
  """
  edges: [LevelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Level` you could get from the connection."""
  totalCount: Int!
}

type Level implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  imageUrl: String!
  createdAt: Datetime!
  updatedAt: Datetime!
  workshopId: BigFloat!
  authorId: BigFloat!
  fileHash: String!
  fileUrl: String!
  fileAuthor: String!
  fileUid: String!
  replacedBy: Int
  deleted: Boolean!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A `Level` edge in the connection."""
type LevelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Level` at the end of the edge."""
  node: Level
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Level`."""
enum LevelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  IMAGE_URL_ASC
  IMAGE_URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  WORKSHOP_ID_ASC
  WORKSHOP_ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  FILE_HASH_ASC
  FILE_HASH_DESC
  FILE_URL_ASC
  FILE_URL_DESC
  FILE_AUTHOR_ASC
  FILE_AUTHOR_DESC
  FILE_UID_ASC
  FILE_UID_DESC
  REPLACED_BY_ASC
  REPLACED_BY_DESC
  DELETED_ASC
  DELETED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Level` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LevelCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `imageUrl` field."""
  imageUrl: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `workshopId` field."""
  workshopId: BigFloat

  """Checks for equality with the object’s `authorId` field."""
  authorId: BigFloat

  """Checks for equality with the object’s `fileHash` field."""
  fileHash: String

  """Checks for equality with the object’s `fileUrl` field."""
  fileUrl: String

  """Checks for equality with the object’s `fileAuthor` field."""
  fileAuthor: String

  """Checks for equality with the object’s `fileUid` field."""
  fileUid: String

  """Checks for equality with the object’s `replacedBy` field."""
  replacedBy: Int

  """Checks for equality with the object’s `deleted` field."""
  deleted: Boolean
}

"""A connection to a list of `Metadatum` values."""
type MetadataConnection {
  """A list of `Metadatum` objects."""
  nodes: [Metadatum]!

  """
  A list of edges which contains the `Metadatum` and cursor to aid in pagination.
  """
  edges: [MetadataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Metadatum` you could get from the connection."""
  totalCount: Int!
}

type Metadatum implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  hash: String!
  valid: Boolean!
  checkpoints: Int!
  blocks: String!
  validation: Float!
  gold: Float!
  silver: Float!
  bronze: Float!
  ground: Int!
  skybox: Int!
}

"""A `Metadatum` edge in the connection."""
type MetadataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Metadatum` at the end of the edge."""
  node: Metadatum
}

"""Methods to use when ordering `Metadatum`."""
enum MetadataOrderBy {
  NATURAL
  HASH_ASC
  HASH_DESC
  VALID_ASC
  VALID_DESC
  CHECKPOINTS_ASC
  CHECKPOINTS_DESC
  BLOCKS_ASC
  BLOCKS_DESC
  VALIDATION_ASC
  VALIDATION_DESC
  GOLD_ASC
  GOLD_DESC
  SILVER_ASC
  SILVER_DESC
  BRONZE_ASC
  BRONZE_DESC
  GROUND_ASC
  GROUND_DESC
  SKYBOX_ASC
  SKYBOX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Metadatum` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MetadatumCondition {
  """Checks for equality with the object’s `hash` field."""
  hash: String

  """Checks for equality with the object’s `valid` field."""
  valid: Boolean

  """Checks for equality with the object’s `checkpoints` field."""
  checkpoints: Int

  """Checks for equality with the object’s `blocks` field."""
  blocks: String

  """Checks for equality with the object’s `validation` field."""
  validation: Float

  """Checks for equality with the object’s `gold` field."""
  gold: Float

  """Checks for equality with the object’s `silver` field."""
  silver: Float

  """Checks for equality with the object’s `bronze` field."""
  bronze: Float

  """Checks for equality with the object’s `ground` field."""
  ground: Int

  """Checks for equality with the object’s `skybox` field."""
  skybox: Int
}